
exercicio_4_interrupcoes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e00  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003fc4  08003fc4  00013fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e0  080040e0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080040e0  080040e0  000140e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040e8  080040e8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040e8  080040e8  000140e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040ec  080040ec  000140ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080040f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000005c  0800414c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  0800414c  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f60f  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223d  00000000  00000000  0002f69b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  000318d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  00032600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c4f  00000000  00000000  00033250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011371  00000000  00000000  00054e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cee69  00000000  00000000  00066210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135079  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037ac  00000000  00000000  001350cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003fac 	.word	0x08003fac

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08003fac 	.word	0x08003fac

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2uiz>:
 80009a0:	004a      	lsls	r2, r1, #1
 80009a2:	d211      	bcs.n	80009c8 <__aeabi_d2uiz+0x28>
 80009a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a8:	d211      	bcs.n	80009ce <__aeabi_d2uiz+0x2e>
 80009aa:	d50d      	bpl.n	80009c8 <__aeabi_d2uiz+0x28>
 80009ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b4:	d40e      	bmi.n	80009d4 <__aeabi_d2uiz+0x34>
 80009b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	4770      	bx	lr
 80009c8:	f04f 0000 	mov.w	r0, #0
 80009cc:	4770      	bx	lr
 80009ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d2:	d102      	bne.n	80009da <__aeabi_d2uiz+0x3a>
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	4770      	bx	lr
 80009da:	f04f 0000 	mov.w	r0, #0
 80009de:	4770      	bx	lr

080009e0 <__aeabi_uldivmod>:
 80009e0:	b953      	cbnz	r3, 80009f8 <__aeabi_uldivmod+0x18>
 80009e2:	b94a      	cbnz	r2, 80009f8 <__aeabi_uldivmod+0x18>
 80009e4:	2900      	cmp	r1, #0
 80009e6:	bf08      	it	eq
 80009e8:	2800      	cmpeq	r0, #0
 80009ea:	bf1c      	itt	ne
 80009ec:	f04f 31ff 	movne.w	r1, #4294967295
 80009f0:	f04f 30ff 	movne.w	r0, #4294967295
 80009f4:	f000 b974 	b.w	8000ce0 <__aeabi_idiv0>
 80009f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a00:	f000 f806 	bl	8000a10 <__udivmoddi4>
 8000a04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a0c:	b004      	add	sp, #16
 8000a0e:	4770      	bx	lr

08000a10 <__udivmoddi4>:
 8000a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a14:	9d08      	ldr	r5, [sp, #32]
 8000a16:	4604      	mov	r4, r0
 8000a18:	468e      	mov	lr, r1
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d14d      	bne.n	8000aba <__udivmoddi4+0xaa>
 8000a1e:	428a      	cmp	r2, r1
 8000a20:	4694      	mov	ip, r2
 8000a22:	d969      	bls.n	8000af8 <__udivmoddi4+0xe8>
 8000a24:	fab2 f282 	clz	r2, r2
 8000a28:	b152      	cbz	r2, 8000a40 <__udivmoddi4+0x30>
 8000a2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a2e:	f1c2 0120 	rsb	r1, r2, #32
 8000a32:	fa20 f101 	lsr.w	r1, r0, r1
 8000a36:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3a:	ea41 0e03 	orr.w	lr, r1, r3
 8000a3e:	4094      	lsls	r4, r2
 8000a40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a44:	0c21      	lsrs	r1, r4, #16
 8000a46:	fbbe f6f8 	udiv	r6, lr, r8
 8000a4a:	fa1f f78c 	uxth.w	r7, ip
 8000a4e:	fb08 e316 	mls	r3, r8, r6, lr
 8000a52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a56:	fb06 f107 	mul.w	r1, r6, r7
 8000a5a:	4299      	cmp	r1, r3
 8000a5c:	d90a      	bls.n	8000a74 <__udivmoddi4+0x64>
 8000a5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a66:	f080 811f 	bcs.w	8000ca8 <__udivmoddi4+0x298>
 8000a6a:	4299      	cmp	r1, r3
 8000a6c:	f240 811c 	bls.w	8000ca8 <__udivmoddi4+0x298>
 8000a70:	3e02      	subs	r6, #2
 8000a72:	4463      	add	r3, ip
 8000a74:	1a5b      	subs	r3, r3, r1
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a84:	fb00 f707 	mul.w	r7, r0, r7
 8000a88:	42a7      	cmp	r7, r4
 8000a8a:	d90a      	bls.n	8000aa2 <__udivmoddi4+0x92>
 8000a8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a94:	f080 810a 	bcs.w	8000cac <__udivmoddi4+0x29c>
 8000a98:	42a7      	cmp	r7, r4
 8000a9a:	f240 8107 	bls.w	8000cac <__udivmoddi4+0x29c>
 8000a9e:	4464      	add	r4, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aa6:	1be4      	subs	r4, r4, r7
 8000aa8:	2600      	movs	r6, #0
 8000aaa:	b11d      	cbz	r5, 8000ab4 <__udivmoddi4+0xa4>
 8000aac:	40d4      	lsrs	r4, r2
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab4:	4631      	mov	r1, r6
 8000ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d909      	bls.n	8000ad2 <__udivmoddi4+0xc2>
 8000abe:	2d00      	cmp	r5, #0
 8000ac0:	f000 80ef 	beq.w	8000ca2 <__udivmoddi4+0x292>
 8000ac4:	2600      	movs	r6, #0
 8000ac6:	e9c5 0100 	strd	r0, r1, [r5]
 8000aca:	4630      	mov	r0, r6
 8000acc:	4631      	mov	r1, r6
 8000ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad2:	fab3 f683 	clz	r6, r3
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d14a      	bne.n	8000b70 <__udivmoddi4+0x160>
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d302      	bcc.n	8000ae4 <__udivmoddi4+0xd4>
 8000ade:	4282      	cmp	r2, r0
 8000ae0:	f200 80f9 	bhi.w	8000cd6 <__udivmoddi4+0x2c6>
 8000ae4:	1a84      	subs	r4, r0, r2
 8000ae6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aea:	2001      	movs	r0, #1
 8000aec:	469e      	mov	lr, r3
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	d0e0      	beq.n	8000ab4 <__udivmoddi4+0xa4>
 8000af2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000af6:	e7dd      	b.n	8000ab4 <__udivmoddi4+0xa4>
 8000af8:	b902      	cbnz	r2, 8000afc <__udivmoddi4+0xec>
 8000afa:	deff      	udf	#255	; 0xff
 8000afc:	fab2 f282 	clz	r2, r2
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	f040 8092 	bne.w	8000c2a <__udivmoddi4+0x21a>
 8000b06:	eba1 010c 	sub.w	r1, r1, ip
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f fe8c 	uxth.w	lr, ip
 8000b12:	2601      	movs	r6, #1
 8000b14:	0c20      	lsrs	r0, r4, #16
 8000b16:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b1a:	fb07 1113 	mls	r1, r7, r3, r1
 8000b1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b22:	fb0e f003 	mul.w	r0, lr, r3
 8000b26:	4288      	cmp	r0, r1
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x12c>
 8000b2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000b2e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b32:	d202      	bcs.n	8000b3a <__udivmoddi4+0x12a>
 8000b34:	4288      	cmp	r0, r1
 8000b36:	f200 80cb 	bhi.w	8000cd0 <__udivmoddi4+0x2c0>
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	1a09      	subs	r1, r1, r0
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b44:	fb07 1110 	mls	r1, r7, r0, r1
 8000b48:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x156>
 8000b54:	eb1c 0404 	adds.w	r4, ip, r4
 8000b58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5c:	d202      	bcs.n	8000b64 <__udivmoddi4+0x154>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f200 80bb 	bhi.w	8000cda <__udivmoddi4+0x2ca>
 8000b64:	4608      	mov	r0, r1
 8000b66:	eba4 040e 	sub.w	r4, r4, lr
 8000b6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b6e:	e79c      	b.n	8000aaa <__udivmoddi4+0x9a>
 8000b70:	f1c6 0720 	rsb	r7, r6, #32
 8000b74:	40b3      	lsls	r3, r6
 8000b76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b7e:	fa20 f407 	lsr.w	r4, r0, r7
 8000b82:	fa01 f306 	lsl.w	r3, r1, r6
 8000b86:	431c      	orrs	r4, r3
 8000b88:	40f9      	lsrs	r1, r7
 8000b8a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b8e:	fa00 f306 	lsl.w	r3, r0, r6
 8000b92:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b96:	0c20      	lsrs	r0, r4, #16
 8000b98:	fa1f fe8c 	uxth.w	lr, ip
 8000b9c:	fb09 1118 	mls	r1, r9, r8, r1
 8000ba0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ba4:	fb08 f00e 	mul.w	r0, r8, lr
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	fa02 f206 	lsl.w	r2, r2, r6
 8000bae:	d90b      	bls.n	8000bc8 <__udivmoddi4+0x1b8>
 8000bb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bb8:	f080 8088 	bcs.w	8000ccc <__udivmoddi4+0x2bc>
 8000bbc:	4288      	cmp	r0, r1
 8000bbe:	f240 8085 	bls.w	8000ccc <__udivmoddi4+0x2bc>
 8000bc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000bc6:	4461      	add	r1, ip
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bd0:	fb09 1110 	mls	r1, r9, r0, r1
 8000bd4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bdc:	458e      	cmp	lr, r1
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x1e2>
 8000be0:	eb1c 0101 	adds.w	r1, ip, r1
 8000be4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000be8:	d26c      	bcs.n	8000cc4 <__udivmoddi4+0x2b4>
 8000bea:	458e      	cmp	lr, r1
 8000bec:	d96a      	bls.n	8000cc4 <__udivmoddi4+0x2b4>
 8000bee:	3802      	subs	r0, #2
 8000bf0:	4461      	add	r1, ip
 8000bf2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bf6:	fba0 9402 	umull	r9, r4, r0, r2
 8000bfa:	eba1 010e 	sub.w	r1, r1, lr
 8000bfe:	42a1      	cmp	r1, r4
 8000c00:	46c8      	mov	r8, r9
 8000c02:	46a6      	mov	lr, r4
 8000c04:	d356      	bcc.n	8000cb4 <__udivmoddi4+0x2a4>
 8000c06:	d053      	beq.n	8000cb0 <__udivmoddi4+0x2a0>
 8000c08:	b15d      	cbz	r5, 8000c22 <__udivmoddi4+0x212>
 8000c0a:	ebb3 0208 	subs.w	r2, r3, r8
 8000c0e:	eb61 010e 	sbc.w	r1, r1, lr
 8000c12:	fa01 f707 	lsl.w	r7, r1, r7
 8000c16:	fa22 f306 	lsr.w	r3, r2, r6
 8000c1a:	40f1      	lsrs	r1, r6
 8000c1c:	431f      	orrs	r7, r3
 8000c1e:	e9c5 7100 	strd	r7, r1, [r5]
 8000c22:	2600      	movs	r6, #0
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	f1c2 0320 	rsb	r3, r2, #32
 8000c2e:	40d8      	lsrs	r0, r3
 8000c30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c34:	fa21 f303 	lsr.w	r3, r1, r3
 8000c38:	4091      	lsls	r1, r2
 8000c3a:	4301      	orrs	r1, r0
 8000c3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c40:	fa1f fe8c 	uxth.w	lr, ip
 8000c44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c48:	fb07 3610 	mls	r6, r7, r0, r3
 8000c4c:	0c0b      	lsrs	r3, r1, #16
 8000c4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c52:	fb00 f60e 	mul.w	r6, r0, lr
 8000c56:	429e      	cmp	r6, r3
 8000c58:	fa04 f402 	lsl.w	r4, r4, r2
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x260>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c66:	d22f      	bcs.n	8000cc8 <__udivmoddi4+0x2b8>
 8000c68:	429e      	cmp	r6, r3
 8000c6a:	d92d      	bls.n	8000cc8 <__udivmoddi4+0x2b8>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1b9b      	subs	r3, r3, r6
 8000c72:	b289      	uxth	r1, r1
 8000c74:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c78:	fb07 3316 	mls	r3, r7, r6, r3
 8000c7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c80:	fb06 f30e 	mul.w	r3, r6, lr
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x28a>
 8000c88:	eb1c 0101 	adds.w	r1, ip, r1
 8000c8c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c90:	d216      	bcs.n	8000cc0 <__udivmoddi4+0x2b0>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d914      	bls.n	8000cc0 <__udivmoddi4+0x2b0>
 8000c96:	3e02      	subs	r6, #2
 8000c98:	4461      	add	r1, ip
 8000c9a:	1ac9      	subs	r1, r1, r3
 8000c9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ca0:	e738      	b.n	8000b14 <__udivmoddi4+0x104>
 8000ca2:	462e      	mov	r6, r5
 8000ca4:	4628      	mov	r0, r5
 8000ca6:	e705      	b.n	8000ab4 <__udivmoddi4+0xa4>
 8000ca8:	4606      	mov	r6, r0
 8000caa:	e6e3      	b.n	8000a74 <__udivmoddi4+0x64>
 8000cac:	4618      	mov	r0, r3
 8000cae:	e6f8      	b.n	8000aa2 <__udivmoddi4+0x92>
 8000cb0:	454b      	cmp	r3, r9
 8000cb2:	d2a9      	bcs.n	8000c08 <__udivmoddi4+0x1f8>
 8000cb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000cb8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cbc:	3801      	subs	r0, #1
 8000cbe:	e7a3      	b.n	8000c08 <__udivmoddi4+0x1f8>
 8000cc0:	4646      	mov	r6, r8
 8000cc2:	e7ea      	b.n	8000c9a <__udivmoddi4+0x28a>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	e794      	b.n	8000bf2 <__udivmoddi4+0x1e2>
 8000cc8:	4640      	mov	r0, r8
 8000cca:	e7d1      	b.n	8000c70 <__udivmoddi4+0x260>
 8000ccc:	46d0      	mov	r8, sl
 8000cce:	e77b      	b.n	8000bc8 <__udivmoddi4+0x1b8>
 8000cd0:	3b02      	subs	r3, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	e732      	b.n	8000b3c <__udivmoddi4+0x12c>
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	e709      	b.n	8000aee <__udivmoddi4+0xde>
 8000cda:	4464      	add	r4, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e742      	b.n	8000b66 <__udivmoddi4+0x156>

08000ce0 <__aeabi_idiv0>:
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	4b45      	ldr	r3, [pc, #276]	; (8000e14 <MX_GPIO_Init+0x130>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a44      	ldr	r2, [pc, #272]	; (8000e14 <MX_GPIO_Init+0x130>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b42      	ldr	r3, [pc, #264]	; (8000e14 <MX_GPIO_Init+0x130>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b3e      	ldr	r3, [pc, #248]	; (8000e14 <MX_GPIO_Init+0x130>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a3d      	ldr	r2, [pc, #244]	; (8000e14 <MX_GPIO_Init+0x130>)
 8000d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <MX_GPIO_Init+0x130>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <MX_GPIO_Init+0x130>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a36      	ldr	r2, [pc, #216]	; (8000e14 <MX_GPIO_Init+0x130>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b34      	ldr	r3, [pc, #208]	; (8000e14 <MX_GPIO_Init+0x130>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <MX_GPIO_Init+0x130>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a2f      	ldr	r2, [pc, #188]	; (8000e14 <MX_GPIO_Init+0x130>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <MX_GPIO_Init+0x130>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_GPIO_Port, Audio_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	482a      	ldr	r0, [pc, #168]	; (8000e18 <MX_GPIO_Init+0x134>)
 8000d70:	f001 f85c 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2120      	movs	r1, #32
 8000d78:	4828      	ldr	r0, [pc, #160]	; (8000e1c <MX_GPIO_Init+0x138>)
 8000d7a:	f001 f857 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4820      	ldr	r0, [pc, #128]	; (8000e18 <MX_GPIO_Init+0x134>)
 8000d96:	f000 fe9d 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_Pin;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Audio_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4819      	ldr	r0, [pc, #100]	; (8000e18 <MX_GPIO_Init+0x134>)
 8000db2:	f000 fe8f 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000db6:	2320      	movs	r3, #32
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4813      	ldr	r0, [pc, #76]	; (8000e1c <MX_GPIO_Init+0x138>)
 8000dce:	f000 fe81 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000dd6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	480e      	ldr	r0, [pc, #56]	; (8000e20 <MX_GPIO_Init+0x13c>)
 8000de8:	f000 fe74 	bl	8001ad4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	2006      	movs	r0, #6
 8000df2:	f000 fda6 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000df6:	2006      	movs	r0, #6
 8000df8:	f000 fdbf 	bl	800197a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2007      	movs	r0, #7
 8000e02:	f000 fd9e 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e06:	2007      	movs	r0, #7
 8000e08:	f000 fdb7 	bl	800197a <HAL_NVIC_EnableIRQ>

}
 8000e0c:	bf00      	nop
 8000e0e:	3728      	adds	r7, #40	; 0x28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	40020400 	.word	0x40020400

08000e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	controller1 = start_controller(Button1_GPIO_Port, Button1_Pin, BUTTON_PULL_UP);
 8000e2a:	4c15      	ldr	r4, [pc, #84]	; (8000e80 <main+0x5c>)
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	2301      	movs	r3, #1
 8000e30:	2201      	movs	r2, #1
 8000e32:	4914      	ldr	r1, [pc, #80]	; (8000e84 <main+0x60>)
 8000e34:	f000 f89e 	bl	8000f74 <start_controller>
 8000e38:	463b      	mov	r3, r7
 8000e3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	controller2 = start_controller(Button2_GPIO_Port, Button2_Pin, BUTTON_PULL_UP);
 8000e42:	4c11      	ldr	r4, [pc, #68]	; (8000e88 <main+0x64>)
 8000e44:	4638      	mov	r0, r7
 8000e46:	2301      	movs	r3, #1
 8000e48:	2202      	movs	r2, #2
 8000e4a:	490e      	ldr	r1, [pc, #56]	; (8000e84 <main+0x60>)
 8000e4c:	f000 f892 	bl	8000f74 <start_controller>
 8000e50:	463b      	mov	r3, r7
 8000e52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5a:	f000 fc25 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5e:	f000 f81b 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e62:	f7ff ff3f 	bl	8000ce4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e66:	f000 fb7b 	bl	8001560 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8000e6a:	f000 fb2d 	bl	80014c8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 8000e6e:	4807      	ldr	r0, [pc, #28]	; (8000e8c <main+0x68>)
 8000e70:	f001 fe60 	bl	8002b34 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &comando, TCMD);
 8000e74:	2201      	movs	r2, #1
 8000e76:	4906      	ldr	r1, [pc, #24]	; (8000e90 <main+0x6c>)
 8000e78:	4806      	ldr	r0, [pc, #24]	; (8000e94 <main+0x70>)
 8000e7a:	f002 f941 	bl	8003100 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000e7e:	e7fe      	b.n	8000e7e <main+0x5a>
 8000e80:	2000007c 	.word	0x2000007c
 8000e84:	40020400 	.word	0x40020400
 8000e88:	20000088 	.word	0x20000088
 8000e8c:	20000098 	.word	0x20000098
 8000e90:	20000094 	.word	0x20000094
 8000e94:	200000e0 	.word	0x200000e0

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	; 0x50
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2234      	movs	r2, #52	; 0x34
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f003 f878 	bl	8003f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <SystemClock_Config+0xd4>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4a29      	ldr	r2, [pc, #164]	; (8000f6c <SystemClock_Config+0xd4>)
 8000ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <SystemClock_Config+0xd4>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ed8:	2300      	movs	r3, #0
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <SystemClock_Config+0xd8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ee4:	4a22      	ldr	r2, [pc, #136]	; (8000f70 <SystemClock_Config+0xd8>)
 8000ee6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <SystemClock_Config+0xd8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000efc:	2301      	movs	r3, #1
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f00:	2310      	movs	r3, #16
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f04:	2302      	movs	r3, #2
 8000f06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f10:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f14:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f16:	2304      	movs	r3, #4
 8000f18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 fb16 	bl	8002558 <HAL_RCC_OscConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f32:	f000 fa3d 	bl	80013b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f36:	230f      	movs	r3, #15
 8000f38:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	2102      	movs	r1, #2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 ffb6 	bl	8001ec4 <HAL_RCC_ClockConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f5e:	f000 fa27 	bl	80013b0 <Error_Handler>
  }
}
 8000f62:	bf00      	nop
 8000f64:	3750      	adds	r7, #80	; 0x50
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40007000 	.word	0x40007000

08000f74 <start_controller>:

/* USER CODE BEGIN 4 */
BUTTON_CONTROLLER start_controller(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BUTTON_PUPD pull){
 8000f74:	b490      	push	{r4, r7}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	460b      	mov	r3, r1
 8000f84:	80fb      	strh	r3, [r7, #6]
 8000f86:	4613      	mov	r3, r2
 8000f88:	717b      	strb	r3, [r7, #5]
	BUTTON_CONTROLLER controller;
	controller.GPIO_Pin = GPIO_Pin;
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	833b      	strh	r3, [r7, #24]
	controller.GPIOx = GPIOx;
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	617b      	str	r3, [r7, #20]
	controller.pull = pull;
 8000f92:	797b      	ldrb	r3, [r7, #5]
 8000f94:	76bb      	strb	r3, [r7, #26]
	controller.atual = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	76fb      	strb	r3, [r7, #27]
	controller.anterior = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	773b      	strb	r3, [r7, #28]
	controller.estado = SOLTO;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	777b      	strb	r3, [r7, #29]
	return controller;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	461c      	mov	r4, r3
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc90      	pop	{r4, r7}
 8000fba:	4770      	bx	lr

08000fbc <gerenciador_botao>:

void gerenciador_botao(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BUTTON_PUPD pull, uint8_t * atual, uint8_t * anterior, ESTADO_BOTAO * estado) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	817b      	strh	r3, [r7, #10]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	727b      	strb	r3, [r7, #9]
	ESTADO_BOTAO estado_botao(uint8_t atual, uint8_t * anerior);
	if ((*atual == 0) && (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) != (GPIO_PinState) pull)){
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d120      	bne.n	8001018 <gerenciador_botao+0x5c>
 8000fd6:	897b      	ldrh	r3, [r7, #10]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f000 ff0e 	bl	8001dfc <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	7a7b      	ldrb	r3, [r7, #9]
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d016      	beq.n	8001018 <gerenciador_botao+0x5c>
		for (int i = 0; i < 80000; i++);
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	e002      	b.n	8000ff6 <gerenciador_botao+0x3a>
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	4a15      	ldr	r2, [pc, #84]	; (8001050 <gerenciador_botao+0x94>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	ddf8      	ble.n	8000ff0 <gerenciador_botao+0x34>
		if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) != (GPIO_PinState) pull){
 8000ffe:	897b      	ldrh	r3, [r7, #10]
 8001000:	4619      	mov	r1, r3
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f000 fefa 	bl	8001dfc <HAL_GPIO_ReadPin>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	7a7b      	ldrb	r3, [r7, #9]
 800100e:	4293      	cmp	r3, r2
 8001010:	d002      	beq.n	8001018 <gerenciador_botao+0x5c>
			*atual = 1;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
		}
	}
	if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == (GPIO_PinState) pull) {
 8001018:	897b      	ldrh	r3, [r7, #10]
 800101a:	4619      	mov	r1, r3
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f000 feed 	bl	8001dfc <HAL_GPIO_ReadPin>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	7a7b      	ldrb	r3, [r7, #9]
 8001028:	4293      	cmp	r3, r2
 800102a:	d102      	bne.n	8001032 <gerenciador_botao+0x76>
		*atual = 0;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
	}
	*estado = estado_botao(*atual, anterior);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	6a39      	ldr	r1, [r7, #32]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f825 	bl	8001088 <estado_botao>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	701a      	strb	r2, [r3, #0]
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	0001387f 	.word	0x0001387f

08001054 <gerenciador_botao_struct>:

void gerenciador_botao_struct(BUTTON_CONTROLLER * controller) {
 8001054:	b5b0      	push	{r4, r5, r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af02      	add	r7, sp, #8
 800105a:	6078      	str	r0, [r7, #4]
	void gerenciador_botao(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BUTTON_PUPD pull, uint8_t * atual, uint8_t * anterior, ESTADO_BOTAO * estado);
	gerenciador_botao(controller->GPIOx, controller->GPIO_Pin, controller->pull, &(controller->atual), &(controller->anterior), &(controller->estado));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	8899      	ldrh	r1, [r3, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	799c      	ldrb	r4, [r3, #6]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	1ddd      	adds	r5, r3, #7
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3308      	adds	r3, #8
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	3209      	adds	r2, #9
 8001074:	9201      	str	r2, [sp, #4]
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	462b      	mov	r3, r5
 800107a:	4622      	mov	r2, r4
 800107c:	f7ff ff9e 	bl	8000fbc <gerenciador_botao>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bdb0      	pop	{r4, r5, r7, pc}

08001088 <estado_botao>:

ESTADO_BOTAO estado_botao(uint8_t atual, uint8_t * anterior) {
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
	if ((*anterior == 0) && (atual == 1)) {
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d107      	bne.n	80010ac <estado_botao+0x24>
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d104      	bne.n	80010ac <estado_botao+0x24>
		*anterior = atual;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	701a      	strb	r2, [r3, #0]
		return AO_PRESSIONAR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e01b      	b.n	80010e4 <estado_botao+0x5c>
	} else if ((*anterior == 1) && (atual == 1)) {
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d107      	bne.n	80010c4 <estado_botao+0x3c>
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d104      	bne.n	80010c4 <estado_botao+0x3c>
		*anterior = atual;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	79fa      	ldrb	r2, [r7, #7]
 80010be:	701a      	strb	r2, [r3, #0]
		return PRESSIONADO;
 80010c0:	2302      	movs	r3, #2
 80010c2:	e00f      	b.n	80010e4 <estado_botao+0x5c>
	} else if ((*anterior == 1) && (atual == 0)) {
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d107      	bne.n	80010dc <estado_botao+0x54>
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d104      	bne.n	80010dc <estado_botao+0x54>
		*anterior = atual;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	79fa      	ldrb	r2, [r7, #7]
 80010d6:	701a      	strb	r2, [r3, #0]
		return AO_SOLTAR;
 80010d8:	2303      	movs	r3, #3
 80010da:	e003      	b.n	80010e4 <estado_botao+0x5c>
	}
	*anterior = atual;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	79fa      	ldrb	r2, [r7, #7]
 80010e0:	701a      	strb	r2, [r3, #0]
	return SOLTO;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	void inverte_pinos();
	__HAL_TIM_CLEAR_IT(&htim10,TIM_IT_UPDATE);
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f06f 0201 	mvn.w	r2, #1
 8001100:	611a      	str	r2, [r3, #16]
	if (liga_desliga == LIGA) inverte_pinos();
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d101      	bne.n	800110e <HAL_TIM_PeriodElapsedCallback+0x1e>
 800110a:	f000 f93b 	bl	8001384 <inverte_pinos>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000098 	.word	0x20000098
 800111c:	20000078 	.word	0x20000078

08001120 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
	long int pegaFrequenciaTim(TIM_HandleTypeDef * htim);
	if (GPIO_Pin == controller1.GPIO_Pin){
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <HAL_GPIO_EXTI_Callback+0x98>)
 800112c:	889b      	ldrh	r3, [r3, #4]
 800112e:	88fa      	ldrh	r2, [r7, #6]
 8001130:	429a      	cmp	r2, r3
 8001132:	d126      	bne.n	8001182 <HAL_GPIO_EXTI_Callback+0x62>
	    gerenciador_botao_struct(&controller1);
 8001134:	4820      	ldr	r0, [pc, #128]	; (80011b8 <HAL_GPIO_EXTI_Callback+0x98>)
 8001136:	f7ff ff8d 	bl	8001054 <gerenciador_botao_struct>
		if (controller1.estado == AO_PRESSIONAR){
 800113a:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <HAL_GPIO_EXTI_Callback+0x98>)
 800113c:	7a5b      	ldrb	r3, [r3, #9]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d11f      	bne.n	8001182 <HAL_GPIO_EXTI_Callback+0x62>
			switch(pegaFrequenciaTim(&htim10)){
 8001142:	481e      	ldr	r0, [pc, #120]	; (80011bc <HAL_GPIO_EXTI_Callback+0x9c>)
 8001144:	f000 f904 	bl	8001350 <pegaFrequenciaTim>
 8001148:	4603      	mov	r3, r0
 800114a:	2be3      	cmp	r3, #227	; 0xe3
 800114c:	d004      	beq.n	8001158 <HAL_GPIO_EXTI_Callback+0x38>
 800114e:	f240 1225 	movw	r2, #293	; 0x125
 8001152:	4293      	cmp	r3, r2
 8001154:	d006      	beq.n	8001164 <HAL_GPIO_EXTI_Callback+0x44>
 8001156:	e00b      	b.n	8001170 <HAL_GPIO_EXTI_Callback+0x50>
			case 227:
				HAL_UART_Transmit_IT(&huart2, (uint8_t *) frase2, (uint16_t) sizeof(frase2));
 8001158:	2215      	movs	r2, #21
 800115a:	4919      	ldr	r1, [pc, #100]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xa0>)
 800115c:	4819      	ldr	r0, [pc, #100]	; (80011c4 <HAL_GPIO_EXTI_Callback+0xa4>)
 800115e:	f001 ff8a 	bl	8003076 <HAL_UART_Transmit_IT>
				break;
 8001162:	e00b      	b.n	800117c <HAL_GPIO_EXTI_Callback+0x5c>
			case 293:
				HAL_UART_Transmit_IT(&huart2, (uint8_t *) frase3, (uint16_t) sizeof(frase3));
 8001164:	2214      	movs	r2, #20
 8001166:	4918      	ldr	r1, [pc, #96]	; (80011c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001168:	4816      	ldr	r0, [pc, #88]	; (80011c4 <HAL_GPIO_EXTI_Callback+0xa4>)
 800116a:	f001 ff84 	bl	8003076 <HAL_UART_Transmit_IT>
				break;
 800116e:	e005      	b.n	800117c <HAL_GPIO_EXTI_Callback+0x5c>
			case 261:
			default:
				HAL_UART_Transmit_IT(&huart2, (uint8_t *) frase1, (uint16_t) sizeof(frase1));
 8001170:	2214      	movs	r2, #20
 8001172:	4916      	ldr	r1, [pc, #88]	; (80011cc <HAL_GPIO_EXTI_Callback+0xac>)
 8001174:	4813      	ldr	r0, [pc, #76]	; (80011c4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001176:	f001 ff7e 	bl	8003076 <HAL_UART_Transmit_IT>
				break;
 800117a:	bf00      	nop
			}
			liga_desliga = LIGA;
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_GPIO_EXTI_Callback+0xb0>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == controller2.GPIO_Pin){
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001184:	889b      	ldrh	r3, [r3, #4]
 8001186:	88fa      	ldrh	r2, [r7, #6]
 8001188:	429a      	cmp	r2, r3
 800118a:	d110      	bne.n	80011ae <HAL_GPIO_EXTI_Callback+0x8e>
		gerenciador_botao_struct(&controller2);
 800118c:	4811      	ldr	r0, [pc, #68]	; (80011d4 <HAL_GPIO_EXTI_Callback+0xb4>)
 800118e:	f7ff ff61 	bl	8001054 <gerenciador_botao_struct>
		if (controller2.estado == AO_PRESSIONAR){
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001194:	7a5b      	ldrb	r3, [r3, #9]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d109      	bne.n	80011ae <HAL_GPIO_EXTI_Callback+0x8e>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *) frase4, (uint16_t) sizeof(frase4));
 800119a:	220e      	movs	r2, #14
 800119c:	490e      	ldr	r1, [pc, #56]	; (80011d8 <HAL_GPIO_EXTI_Callback+0xb8>)
 800119e:	4809      	ldr	r0, [pc, #36]	; (80011c4 <HAL_GPIO_EXTI_Callback+0xa4>)
 80011a0:	f001 ff69 	bl	8003076 <HAL_UART_Transmit_IT>
			liga_desliga = DESLIGA;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_GPIO_EXTI_Callback+0xb0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
			zera_notas();
 80011aa:	f000 f8f5 	bl	8001398 <zera_notas>
		}
	}
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000007c 	.word	0x2000007c
 80011bc:	20000098 	.word	0x20000098
 80011c0:	20000014 	.word	0x20000014
 80011c4:	200000e0 	.word	0x200000e0
 80011c8:	2000002c 	.word	0x2000002c
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000078 	.word	0x20000078
 80011d4:	20000088 	.word	0x20000088
 80011d8:	20000040 	.word	0x20000040

080011dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	void gerencia_estados();
	if (isalpha(comando)) {
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_UART_RxCpltCallback+0x5c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a14      	ldr	r2, [pc, #80]	; (800123c <HAL_UART_RxCpltCallback+0x60>)
 80011ec:	4413      	add	r3, r2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d004      	beq.n	8001202 <HAL_UART_RxCpltCallback+0x26>
		comando_letra = comando;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_UART_RxCpltCallback+0x5c>)
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <HAL_UART_RxCpltCallback+0x64>)
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e011      	b.n	8001226 <HAL_UART_RxCpltCallback+0x4a>
	} else if (isdigit(comando)) {
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <HAL_UART_RxCpltCallback+0x5c>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	4a0c      	ldr	r2, [pc, #48]	; (800123c <HAL_UART_RxCpltCallback+0x60>)
 800120a:	4413      	add	r3, r2
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <HAL_UART_RxCpltCallback+0x4a>
		comando_numero = comando - '0';
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_UART_RxCpltCallback+0x5c>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	3b30      	subs	r3, #48	; 0x30
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_UART_RxCpltCallback+0x68>)
 8001220:	701a      	strb	r2, [r3, #0]
		gerencia_estados();
 8001222:	f000 f813 	bl	800124c <gerencia_estados>
	}
	HAL_UART_Receive_IT(&huart2, &comando, TCMD);
 8001226:	2201      	movs	r2, #1
 8001228:	4903      	ldr	r1, [pc, #12]	; (8001238 <HAL_UART_RxCpltCallback+0x5c>)
 800122a:	4807      	ldr	r0, [pc, #28]	; (8001248 <HAL_UART_RxCpltCallback+0x6c>)
 800122c:	f001 ff68 	bl	8003100 <HAL_UART_Receive_IT>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000094 	.word	0x20000094
 800123c:	08003fdc 	.word	0x08003fdc
 8001240:	20000095 	.word	0x20000095
 8001244:	20000096 	.word	0x20000096
 8001248:	200000e0 	.word	0x200000e0

0800124c <gerencia_estados>:

void gerencia_estados() {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	void setaFrequenciaTim(TIM_HandleTypeDef * htim, int frequencia);

	switch(comando_numero){
 8001250:	4b16      	ldr	r3, [pc, #88]	; (80012ac <gerencia_estados+0x60>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d01b      	beq.n	8001290 <gerencia_estados+0x44>
 8001258:	2b03      	cmp	r3, #3
 800125a:	dc24      	bgt.n	80012a6 <gerencia_estados+0x5a>
 800125c:	2b01      	cmp	r3, #1
 800125e:	d002      	beq.n	8001266 <gerencia_estados+0x1a>
 8001260:	2b02      	cmp	r3, #2
 8001262:	d00b      	beq.n	800127c <gerencia_estados+0x30>
	case 3:
		setaFrequenciaTim(&htim10, 293);
		HAL_UART_Transmit_IT(&huart2, (uint8_t *) frase3, (uint16_t) sizeof(frase3));
		break;
	default:
		break;
 8001264:	e01f      	b.n	80012a6 <gerencia_estados+0x5a>
		setaFrequenciaTim(&htim10, 261);
 8001266:	f240 1105 	movw	r1, #261	; 0x105
 800126a:	4811      	ldr	r0, [pc, #68]	; (80012b0 <gerencia_estados+0x64>)
 800126c:	f000 f82a 	bl	80012c4 <setaFrequenciaTim>
		HAL_UART_Transmit_IT(&huart2, (uint8_t *) frase1, (uint16_t) sizeof(frase1));
 8001270:	2214      	movs	r2, #20
 8001272:	4910      	ldr	r1, [pc, #64]	; (80012b4 <gerencia_estados+0x68>)
 8001274:	4810      	ldr	r0, [pc, #64]	; (80012b8 <gerencia_estados+0x6c>)
 8001276:	f001 fefe 	bl	8003076 <HAL_UART_Transmit_IT>
		break;
 800127a:	e015      	b.n	80012a8 <gerencia_estados+0x5c>
		setaFrequenciaTim(&htim10, 227);
 800127c:	21e3      	movs	r1, #227	; 0xe3
 800127e:	480c      	ldr	r0, [pc, #48]	; (80012b0 <gerencia_estados+0x64>)
 8001280:	f000 f820 	bl	80012c4 <setaFrequenciaTim>
		HAL_UART_Transmit_IT(&huart2, (uint8_t *) frase2, (uint16_t) sizeof(frase2));
 8001284:	2215      	movs	r2, #21
 8001286:	490d      	ldr	r1, [pc, #52]	; (80012bc <gerencia_estados+0x70>)
 8001288:	480b      	ldr	r0, [pc, #44]	; (80012b8 <gerencia_estados+0x6c>)
 800128a:	f001 fef4 	bl	8003076 <HAL_UART_Transmit_IT>
		break;
 800128e:	e00b      	b.n	80012a8 <gerencia_estados+0x5c>
		setaFrequenciaTim(&htim10, 293);
 8001290:	f240 1125 	movw	r1, #293	; 0x125
 8001294:	4806      	ldr	r0, [pc, #24]	; (80012b0 <gerencia_estados+0x64>)
 8001296:	f000 f815 	bl	80012c4 <setaFrequenciaTim>
		HAL_UART_Transmit_IT(&huart2, (uint8_t *) frase3, (uint16_t) sizeof(frase3));
 800129a:	2214      	movs	r2, #20
 800129c:	4908      	ldr	r1, [pc, #32]	; (80012c0 <gerencia_estados+0x74>)
 800129e:	4806      	ldr	r0, [pc, #24]	; (80012b8 <gerencia_estados+0x6c>)
 80012a0:	f001 fee9 	bl	8003076 <HAL_UART_Transmit_IT>
		break;
 80012a4:	e000      	b.n	80012a8 <gerencia_estados+0x5c>
		break;
 80012a6:	bf00      	nop
	}
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000096 	.word	0x20000096
 80012b0:	20000098 	.word	0x20000098
 80012b4:	20000000 	.word	0x20000000
 80012b8:	200000e0 	.word	0x200000e0
 80012bc:	20000014 	.word	0x20000014
 80012c0:	2000002c 	.word	0x2000002c

080012c4 <setaFrequenciaTim>:

void setaFrequenciaTim(TIM_HandleTypeDef * htim, int frequencia)
{
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
	double temp = 84000000/(frequencia * 2);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <setaFrequenciaTim+0x84>)
 80012d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f8e5 	bl	80004a8 <__aeabi_i2d>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double arr = temp / (htim->Instance->PSC + 1) - 1;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	3301      	adds	r3, #1
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f8ca 	bl	8000488 <__aeabi_ui2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012fc:	f7ff fa68 	bl	80007d0 <__aeabi_ddiv>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <setaFrequenciaTim+0x88>)
 800130e:	f7fe ff7d 	bl	800020c <__aeabi_dsub>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	e9c7 2302 	strd	r2, r3, [r7, #8]
	__HAL_TIM_SET_COUNTER(htim, 0);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(htim, arr);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681c      	ldr	r4, [r3, #0]
 8001326:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800132a:	f7ff fb39 	bl	80009a0 <__aeabi_d2uiz>
 800132e:	4603      	mov	r3, r0
 8001330:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001332:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001336:	f7ff fb33 	bl	80009a0 <__aeabi_d2uiz>
 800133a:	4602      	mov	r2, r0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	60da      	str	r2, [r3, #12]
}
 8001340:	bf00      	nop
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	0501bd00 	.word	0x0501bd00
 800134c:	3ff00000 	.word	0x3ff00000

08001350 <pegaFrequenciaTim>:

long int pegaFrequenciaTim(TIM_HandleTypeDef * htim) {
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	return (long int) 84000000/((htim->Instance->PSC + 1) * (htim->Instance->ARR + 1)) / 2;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135e:	3301      	adds	r3, #1
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001366:	3201      	adds	r2, #1
 8001368:	fb02 f303 	mul.w	r3, r2, r3
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <pegaFrequenciaTim+0x30>)
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	0280de80 	.word	0x0280de80

08001384 <inverte_pinos>:

void inverte_pinos(){
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Audio_GPIO_Port, Audio_Pin);
 8001388:	2101      	movs	r1, #1
 800138a:	4802      	ldr	r0, [pc, #8]	; (8001394 <inverte_pinos+0x10>)
 800138c:	f000 fd67 	bl	8001e5e <HAL_GPIO_TogglePin>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40020800 	.word	0x40020800

08001398 <zera_notas>:

void zera_notas(){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Audio_GPIO_Port, Audio_Pin, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2101      	movs	r1, #1
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <zera_notas+0x14>)
 80013a2:	f000 fd43 	bl	8001e2c <HAL_GPIO_WritePin>
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40020800 	.word	0x40020800

080013b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80013b8:	e7fe      	b.n	80013b8 <Error_Handler+0x8>
	...

080013bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_MspInit+0x4c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <HAL_MspInit+0x4c>)
 80013cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d0:	6453      	str	r3, [r2, #68]	; 0x44
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_MspInit+0x4c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_MspInit+0x4c>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_MspInit+0x4c>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ec:	6413      	str	r3, [r2, #64]	; 0x40
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_MspInit+0x4c>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013fa:	2007      	movs	r0, #7
 80013fc:	f000 fa96 	bl	800192c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800

0800140c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <NMI_Handler+0x4>

08001412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <HardFault_Handler+0x4>

08001418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <MemManage_Handler+0x4>

0800141e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <UsageFault_Handler+0x4>

0800142a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001458:	f000 f978 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 8001464:	2001      	movs	r0, #1
 8001466:	f000 fd15 	bl	8001e94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}

0800146e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
 8001472:	2002      	movs	r0, #2
 8001474:	f000 fd0e 	bl	8001e94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001482:	f001 fbc7 	bl	8002c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000098 	.word	0x20000098

08001490 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <USART2_IRQHandler+0x10>)
 8001496:	f001 fe63 	bl	8003160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200000e0 	.word	0x200000e0

080014a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <SystemInit+0x20>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <SystemInit+0x20>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_TIM10_Init+0x40>)
 80014ce:	4a0f      	ldr	r2, [pc, #60]	; (800150c <MX_TIM10_Init+0x44>)
 80014d0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1999;
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <MX_TIM10_Init+0x40>)
 80014d4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80014d8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MX_TIM10_Init+0x40>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 79;
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_TIM10_Init+0x40>)
 80014e2:	224f      	movs	r2, #79	; 0x4f
 80014e4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <MX_TIM10_Init+0x40>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <MX_TIM10_Init+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_TIM10_Init+0x40>)
 80014f4:	f001 face 	bl	8002a94 <HAL_TIM_Base_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80014fe:	f7ff ff57 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000098 	.word	0x20000098
 800150c:	40014400 	.word	0x40014400

08001510 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <HAL_TIM_Base_MspInit+0x48>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d115      	bne.n	800154e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <HAL_TIM_Base_MspInit+0x4c>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a0c      	ldr	r2, [pc, #48]	; (800155c <HAL_TIM_Base_MspInit+0x4c>)
 800152c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_TIM_Base_MspInit+0x4c>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	2019      	movs	r0, #25
 8001544:	f000 f9fd 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001548:	2019      	movs	r0, #25
 800154a:	f000 fa16 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40014400 	.word	0x40014400
 800155c:	40023800 	.word	0x40023800

08001560 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MX_USART2_UART_Init+0x50>)
 8001568:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800156c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001570:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001598:	f001 fd20 	bl	8002fdc <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f7ff ff05 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200000e0 	.word	0x200000e0
 80015b0:	40004400 	.word	0x40004400

080015b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a1d      	ldr	r2, [pc, #116]	; (8001648 <HAL_UART_MspInit+0x94>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d133      	bne.n	800163e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <HAL_UART_MspInit+0x98>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a1b      	ldr	r2, [pc, #108]	; (800164c <HAL_UART_MspInit+0x98>)
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <HAL_UART_MspInit+0x98>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_UART_MspInit+0x98>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a14      	ldr	r2, [pc, #80]	; (800164c <HAL_UART_MspInit+0x98>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_UART_MspInit+0x98>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800160e:	230c      	movs	r3, #12
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800161e:	2307      	movs	r3, #7
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	4809      	ldr	r0, [pc, #36]	; (8001650 <HAL_UART_MspInit+0x9c>)
 800162a:	f000 fa53 	bl	8001ad4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	2026      	movs	r0, #38	; 0x26
 8001634:	f000 f985 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001638:	2026      	movs	r0, #38	; 0x26
 800163a:	f000 f99e 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800163e:	bf00      	nop
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40004400 	.word	0x40004400
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800165a:	490e      	ldr	r1, [pc, #56]	; (8001694 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001670:	4c0b      	ldr	r4, [pc, #44]	; (80016a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800167e:	f7ff ff11 	bl	80014a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001682:	f002 fc67 	bl	8003f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff fbcd 	bl	8000e24 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800168c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001698:	080040f0 	.word	0x080040f0
  ldr r2, =_sbss
 800169c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80016a0:	20000128 	.word	0x20000128

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <HAL_Init+0x40>)
 80016b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_Init+0x40>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_Init+0x40>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 f92b 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff fe6e 	bl	80013bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f943 	bl	8001996 <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 f90b 	bl	8001942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000050 	.word	0x20000050
 8001744:	20000058 	.word	0x20000058
 8001748:	20000054 	.word	0x20000054

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000058 	.word	0x20000058
 8001770:	20000124 	.word	0x20000124

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000124 	.word	0x20000124

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4907      	ldr	r1, [pc, #28]	; (8001828 <__NVIC_EnableIRQ+0x38>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000e100 	.word	0xe000e100

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f7ff ff8e 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff29 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff3e 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff8e 	bl	8001880 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5d 	bl	800182c <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff31 	bl	80017f0 <__NVIC_EnableIRQ>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffa2 	bl	80018e8 <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019bc:	f7ff feda 	bl	8001774 <HAL_GetTick>
 80019c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d008      	beq.n	80019e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2280      	movs	r2, #128	; 0x80
 80019d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e052      	b.n	8001a86 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0216 	bic.w	r2, r2, #22
 80019ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d103      	bne.n	8001a10 <HAL_DMA_Abort+0x62>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d007      	beq.n	8001a20 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0208 	bic.w	r2, r2, #8
 8001a1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0201 	bic.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a30:	e013      	b.n	8001a5a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a32:	f7ff fe9f 	bl	8001774 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	d90c      	bls.n	8001a5a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2220      	movs	r2, #32
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2203      	movs	r2, #3
 8001a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e015      	b.n	8001a86 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1e4      	bne.n	8001a32 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6c:	223f      	movs	r2, #63	; 0x3f
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d004      	beq.n	8001aac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e00c      	b.n	8001ac6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2205      	movs	r2, #5
 8001ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e165      	b.n	8001dbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 8154 	bne.w	8001db6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d005      	beq.n	8001b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d130      	bne.n	8001b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 0201 	and.w	r2, r3, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d017      	beq.n	8001bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d123      	bne.n	8001c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80ae 	beq.w	8001db6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b5d      	ldr	r3, [pc, #372]	; (8001dd4 <HAL_GPIO_Init+0x300>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a5c      	ldr	r2, [pc, #368]	; (8001dd4 <HAL_GPIO_Init+0x300>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b5a      	ldr	r3, [pc, #360]	; (8001dd4 <HAL_GPIO_Init+0x300>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c76:	4a58      	ldr	r2, [pc, #352]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4f      	ldr	r2, [pc, #316]	; (8001ddc <HAL_GPIO_Init+0x308>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d025      	beq.n	8001cee <HAL_GPIO_Init+0x21a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4e      	ldr	r2, [pc, #312]	; (8001de0 <HAL_GPIO_Init+0x30c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d01f      	beq.n	8001cea <HAL_GPIO_Init+0x216>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4d      	ldr	r2, [pc, #308]	; (8001de4 <HAL_GPIO_Init+0x310>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d019      	beq.n	8001ce6 <HAL_GPIO_Init+0x212>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4c      	ldr	r2, [pc, #304]	; (8001de8 <HAL_GPIO_Init+0x314>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_GPIO_Init+0x20e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4b      	ldr	r2, [pc, #300]	; (8001dec <HAL_GPIO_Init+0x318>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00d      	beq.n	8001cde <HAL_GPIO_Init+0x20a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4a      	ldr	r2, [pc, #296]	; (8001df0 <HAL_GPIO_Init+0x31c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d007      	beq.n	8001cda <HAL_GPIO_Init+0x206>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a49      	ldr	r2, [pc, #292]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_GPIO_Init+0x202>
 8001cd2:	2306      	movs	r3, #6
 8001cd4:	e00c      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	e00a      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cda:	2305      	movs	r3, #5
 8001cdc:	e008      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cde:	2304      	movs	r3, #4
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e004      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e002      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	f002 0203 	and.w	r2, r2, #3
 8001cf6:	0092      	lsls	r2, r2, #2
 8001cf8:	4093      	lsls	r3, r2
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d00:	4935      	ldr	r1, [pc, #212]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	3302      	adds	r3, #2
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d0e:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d32:	4a31      	ldr	r2, [pc, #196]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d38:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d5c:	4a26      	ldr	r2, [pc, #152]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d62:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d86:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001db0:	4a11      	ldr	r2, [pc, #68]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3301      	adds	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	2b0f      	cmp	r3, #15
 8001dc0:	f67f ae96 	bls.w	8001af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3724      	adds	r7, #36	; 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40013800 	.word	0x40013800
 8001ddc:	40020000 	.word	0x40020000
 8001de0:	40020400 	.word	0x40020400
 8001de4:	40020800 	.word	0x40020800
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40021400 	.word	0x40021400
 8001df4:	40021800 	.word	0x40021800
 8001df8:	40013c00 	.word	0x40013c00

08001dfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
 8001e18:	e001      	b.n	8001e1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e48:	e003      	b.n	8001e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	041a      	lsls	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	619a      	str	r2, [r3, #24]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b085      	sub	sp, #20
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e70:	887a      	ldrh	r2, [r7, #2]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4013      	ands	r3, r2
 8001e76:	041a      	lsls	r2, r3, #16
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	400b      	ands	r3, r1
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	619a      	str	r2, [r3, #24]
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eaa:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f934 	bl	8001120 <HAL_GPIO_EXTI_Callback>
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40013c00 	.word	0x40013c00

08001ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0cc      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b68      	ldr	r3, [pc, #416]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d90c      	bls.n	8001f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b65      	ldr	r3, [pc, #404]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b63      	ldr	r3, [pc, #396]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0b8      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d020      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f18:	4b59      	ldr	r3, [pc, #356]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4a58      	ldr	r2, [pc, #352]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f30:	4b53      	ldr	r3, [pc, #332]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4a52      	ldr	r2, [pc, #328]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3c:	4b50      	ldr	r3, [pc, #320]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	494d      	ldr	r1, [pc, #308]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d044      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	4b47      	ldr	r3, [pc, #284]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d119      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e07f      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d003      	beq.n	8001f82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f82:	4b3f      	ldr	r3, [pc, #252]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e06f      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e067      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa2:	4b37      	ldr	r3, [pc, #220]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f023 0203 	bic.w	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4934      	ldr	r1, [pc, #208]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb4:	f7ff fbde 	bl	8001774 <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbc:	f7ff fbda 	bl	8001774 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e04f      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 020c 	and.w	r2, r3, #12
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d1eb      	bne.n	8001fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b25      	ldr	r3, [pc, #148]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d20c      	bcs.n	800200c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b22      	ldr	r3, [pc, #136]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e032      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4916      	ldr	r1, [pc, #88]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d009      	beq.n	800204a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	490e      	ldr	r1, [pc, #56]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800204a:	f000 f855 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 800204e:	4602      	mov	r2, r0
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	490a      	ldr	r1, [pc, #40]	; (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	5ccb      	ldrb	r3, [r1, r3]
 800205e:	fa22 f303 	lsr.w	r3, r2, r3
 8002062:	4a09      	ldr	r2, [pc, #36]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fb3e 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023c00 	.word	0x40023c00
 8002080:	40023800 	.word	0x40023800
 8002084:	08003fc4 	.word	0x08003fc4
 8002088:	20000050 	.word	0x20000050
 800208c:	20000054 	.word	0x20000054

08002090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000050 	.word	0x20000050

080020a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020ac:	f7ff fff0 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	0a9b      	lsrs	r3, r3, #10
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	4903      	ldr	r1, [pc, #12]	; (80020cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020be:	5ccb      	ldrb	r3, [r1, r3]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	08003fd4 	.word	0x08003fd4

080020d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020d4:	f7ff ffdc 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0b5b      	lsrs	r3, r3, #13
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4903      	ldr	r1, [pc, #12]	; (80020f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	08003fd4 	.word	0x08003fd4

080020f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020fc:	b0ae      	sub	sp, #184	; 0xb8
 80020fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800211e:	4bcb      	ldr	r3, [pc, #812]	; (800244c <HAL_RCC_GetSysClockFreq+0x354>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b0c      	cmp	r3, #12
 8002128:	f200 8206 	bhi.w	8002538 <HAL_RCC_GetSysClockFreq+0x440>
 800212c:	a201      	add	r2, pc, #4	; (adr r2, 8002134 <HAL_RCC_GetSysClockFreq+0x3c>)
 800212e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002132:	bf00      	nop
 8002134:	08002169 	.word	0x08002169
 8002138:	08002539 	.word	0x08002539
 800213c:	08002539 	.word	0x08002539
 8002140:	08002539 	.word	0x08002539
 8002144:	08002171 	.word	0x08002171
 8002148:	08002539 	.word	0x08002539
 800214c:	08002539 	.word	0x08002539
 8002150:	08002539 	.word	0x08002539
 8002154:	08002179 	.word	0x08002179
 8002158:	08002539 	.word	0x08002539
 800215c:	08002539 	.word	0x08002539
 8002160:	08002539 	.word	0x08002539
 8002164:	08002369 	.word	0x08002369
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002168:	4bb9      	ldr	r3, [pc, #740]	; (8002450 <HAL_RCC_GetSysClockFreq+0x358>)
 800216a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800216e:	e1e7      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002170:	4bb8      	ldr	r3, [pc, #736]	; (8002454 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002172:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002176:	e1e3      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002178:	4bb4      	ldr	r3, [pc, #720]	; (800244c <HAL_RCC_GetSysClockFreq+0x354>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002180:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002184:	4bb1      	ldr	r3, [pc, #708]	; (800244c <HAL_RCC_GetSysClockFreq+0x354>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d071      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002190:	4bae      	ldr	r3, [pc, #696]	; (800244c <HAL_RCC_GetSysClockFreq+0x354>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	099b      	lsrs	r3, r3, #6
 8002196:	2200      	movs	r2, #0
 8002198:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800219c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80021a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80021b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80021b6:	4622      	mov	r2, r4
 80021b8:	462b      	mov	r3, r5
 80021ba:	f04f 0000 	mov.w	r0, #0
 80021be:	f04f 0100 	mov.w	r1, #0
 80021c2:	0159      	lsls	r1, r3, #5
 80021c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021c8:	0150      	lsls	r0, r2, #5
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4621      	mov	r1, r4
 80021d0:	1a51      	subs	r1, r2, r1
 80021d2:	6439      	str	r1, [r7, #64]	; 0x40
 80021d4:	4629      	mov	r1, r5
 80021d6:	eb63 0301 	sbc.w	r3, r3, r1
 80021da:	647b      	str	r3, [r7, #68]	; 0x44
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80021e8:	4649      	mov	r1, r9
 80021ea:	018b      	lsls	r3, r1, #6
 80021ec:	4641      	mov	r1, r8
 80021ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021f2:	4641      	mov	r1, r8
 80021f4:	018a      	lsls	r2, r1, #6
 80021f6:	4641      	mov	r1, r8
 80021f8:	1a51      	subs	r1, r2, r1
 80021fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80021fc:	4649      	mov	r1, r9
 80021fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002210:	4649      	mov	r1, r9
 8002212:	00cb      	lsls	r3, r1, #3
 8002214:	4641      	mov	r1, r8
 8002216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800221a:	4641      	mov	r1, r8
 800221c:	00ca      	lsls	r2, r1, #3
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	4603      	mov	r3, r0
 8002224:	4622      	mov	r2, r4
 8002226:	189b      	adds	r3, r3, r2
 8002228:	633b      	str	r3, [r7, #48]	; 0x30
 800222a:	462b      	mov	r3, r5
 800222c:	460a      	mov	r2, r1
 800222e:	eb42 0303 	adc.w	r3, r2, r3
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002240:	4629      	mov	r1, r5
 8002242:	024b      	lsls	r3, r1, #9
 8002244:	4621      	mov	r1, r4
 8002246:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800224a:	4621      	mov	r1, r4
 800224c:	024a      	lsls	r2, r1, #9
 800224e:	4610      	mov	r0, r2
 8002250:	4619      	mov	r1, r3
 8002252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002256:	2200      	movs	r2, #0
 8002258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800225c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002260:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002264:	f7fe fbbc 	bl	80009e0 <__aeabi_uldivmod>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4613      	mov	r3, r2
 800226e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002272:	e067      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002274:	4b75      	ldr	r3, [pc, #468]	; (800244c <HAL_RCC_GetSysClockFreq+0x354>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	099b      	lsrs	r3, r3, #6
 800227a:	2200      	movs	r2, #0
 800227c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002280:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002284:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800228c:	67bb      	str	r3, [r7, #120]	; 0x78
 800228e:	2300      	movs	r3, #0
 8002290:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002292:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002296:	4622      	mov	r2, r4
 8002298:	462b      	mov	r3, r5
 800229a:	f04f 0000 	mov.w	r0, #0
 800229e:	f04f 0100 	mov.w	r1, #0
 80022a2:	0159      	lsls	r1, r3, #5
 80022a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a8:	0150      	lsls	r0, r2, #5
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4621      	mov	r1, r4
 80022b0:	1a51      	subs	r1, r2, r1
 80022b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80022b4:	4629      	mov	r1, r5
 80022b6:	eb63 0301 	sbc.w	r3, r3, r1
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80022c8:	4649      	mov	r1, r9
 80022ca:	018b      	lsls	r3, r1, #6
 80022cc:	4641      	mov	r1, r8
 80022ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022d2:	4641      	mov	r1, r8
 80022d4:	018a      	lsls	r2, r1, #6
 80022d6:	4641      	mov	r1, r8
 80022d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80022dc:	4649      	mov	r1, r9
 80022de:	eb63 0b01 	sbc.w	fp, r3, r1
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022f6:	4692      	mov	sl, r2
 80022f8:	469b      	mov	fp, r3
 80022fa:	4623      	mov	r3, r4
 80022fc:	eb1a 0303 	adds.w	r3, sl, r3
 8002300:	623b      	str	r3, [r7, #32]
 8002302:	462b      	mov	r3, r5
 8002304:	eb4b 0303 	adc.w	r3, fp, r3
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002316:	4629      	mov	r1, r5
 8002318:	028b      	lsls	r3, r1, #10
 800231a:	4621      	mov	r1, r4
 800231c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002320:	4621      	mov	r1, r4
 8002322:	028a      	lsls	r2, r1, #10
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800232c:	2200      	movs	r2, #0
 800232e:	673b      	str	r3, [r7, #112]	; 0x70
 8002330:	677a      	str	r2, [r7, #116]	; 0x74
 8002332:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002336:	f7fe fb53 	bl	80009e0 <__aeabi_uldivmod>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4613      	mov	r3, r2
 8002340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002344:	4b41      	ldr	r3, [pc, #260]	; (800244c <HAL_RCC_GetSysClockFreq+0x354>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	0c1b      	lsrs	r3, r3, #16
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	3301      	adds	r3, #1
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002356:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800235a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002366:	e0eb      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002368:	4b38      	ldr	r3, [pc, #224]	; (800244c <HAL_RCC_GetSysClockFreq+0x354>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002370:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002374:	4b35      	ldr	r3, [pc, #212]	; (800244c <HAL_RCC_GetSysClockFreq+0x354>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d06b      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002380:	4b32      	ldr	r3, [pc, #200]	; (800244c <HAL_RCC_GetSysClockFreq+0x354>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	099b      	lsrs	r3, r3, #6
 8002386:	2200      	movs	r2, #0
 8002388:	66bb      	str	r3, [r7, #104]	; 0x68
 800238a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800238c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800238e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002392:	663b      	str	r3, [r7, #96]	; 0x60
 8002394:	2300      	movs	r3, #0
 8002396:	667b      	str	r3, [r7, #100]	; 0x64
 8002398:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800239c:	4622      	mov	r2, r4
 800239e:	462b      	mov	r3, r5
 80023a0:	f04f 0000 	mov.w	r0, #0
 80023a4:	f04f 0100 	mov.w	r1, #0
 80023a8:	0159      	lsls	r1, r3, #5
 80023aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023ae:	0150      	lsls	r0, r2, #5
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4621      	mov	r1, r4
 80023b6:	1a51      	subs	r1, r2, r1
 80023b8:	61b9      	str	r1, [r7, #24]
 80023ba:	4629      	mov	r1, r5
 80023bc:	eb63 0301 	sbc.w	r3, r3, r1
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80023ce:	4659      	mov	r1, fp
 80023d0:	018b      	lsls	r3, r1, #6
 80023d2:	4651      	mov	r1, sl
 80023d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023d8:	4651      	mov	r1, sl
 80023da:	018a      	lsls	r2, r1, #6
 80023dc:	4651      	mov	r1, sl
 80023de:	ebb2 0801 	subs.w	r8, r2, r1
 80023e2:	4659      	mov	r1, fp
 80023e4:	eb63 0901 	sbc.w	r9, r3, r1
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023fc:	4690      	mov	r8, r2
 80023fe:	4699      	mov	r9, r3
 8002400:	4623      	mov	r3, r4
 8002402:	eb18 0303 	adds.w	r3, r8, r3
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	462b      	mov	r3, r5
 800240a:	eb49 0303 	adc.w	r3, r9, r3
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800241c:	4629      	mov	r1, r5
 800241e:	024b      	lsls	r3, r1, #9
 8002420:	4621      	mov	r1, r4
 8002422:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002426:	4621      	mov	r1, r4
 8002428:	024a      	lsls	r2, r1, #9
 800242a:	4610      	mov	r0, r2
 800242c:	4619      	mov	r1, r3
 800242e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002432:	2200      	movs	r2, #0
 8002434:	65bb      	str	r3, [r7, #88]	; 0x58
 8002436:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002438:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800243c:	f7fe fad0 	bl	80009e0 <__aeabi_uldivmod>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4613      	mov	r3, r2
 8002446:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800244a:	e065      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x420>
 800244c:	40023800 	.word	0x40023800
 8002450:	00f42400 	.word	0x00f42400
 8002454:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002458:	4b3d      	ldr	r3, [pc, #244]	; (8002550 <HAL_RCC_GetSysClockFreq+0x458>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	099b      	lsrs	r3, r3, #6
 800245e:	2200      	movs	r2, #0
 8002460:	4618      	mov	r0, r3
 8002462:	4611      	mov	r1, r2
 8002464:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002468:	653b      	str	r3, [r7, #80]	; 0x50
 800246a:	2300      	movs	r3, #0
 800246c:	657b      	str	r3, [r7, #84]	; 0x54
 800246e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002472:	4642      	mov	r2, r8
 8002474:	464b      	mov	r3, r9
 8002476:	f04f 0000 	mov.w	r0, #0
 800247a:	f04f 0100 	mov.w	r1, #0
 800247e:	0159      	lsls	r1, r3, #5
 8002480:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002484:	0150      	lsls	r0, r2, #5
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4641      	mov	r1, r8
 800248c:	1a51      	subs	r1, r2, r1
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	4649      	mov	r1, r9
 8002492:	eb63 0301 	sbc.w	r3, r3, r1
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80024a4:	4659      	mov	r1, fp
 80024a6:	018b      	lsls	r3, r1, #6
 80024a8:	4651      	mov	r1, sl
 80024aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ae:	4651      	mov	r1, sl
 80024b0:	018a      	lsls	r2, r1, #6
 80024b2:	4651      	mov	r1, sl
 80024b4:	1a54      	subs	r4, r2, r1
 80024b6:	4659      	mov	r1, fp
 80024b8:	eb63 0501 	sbc.w	r5, r3, r1
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	00eb      	lsls	r3, r5, #3
 80024c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024ca:	00e2      	lsls	r2, r4, #3
 80024cc:	4614      	mov	r4, r2
 80024ce:	461d      	mov	r5, r3
 80024d0:	4643      	mov	r3, r8
 80024d2:	18e3      	adds	r3, r4, r3
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	464b      	mov	r3, r9
 80024d8:	eb45 0303 	adc.w	r3, r5, r3
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ea:	4629      	mov	r1, r5
 80024ec:	028b      	lsls	r3, r1, #10
 80024ee:	4621      	mov	r1, r4
 80024f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f4:	4621      	mov	r1, r4
 80024f6:	028a      	lsls	r2, r1, #10
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002500:	2200      	movs	r2, #0
 8002502:	64bb      	str	r3, [r7, #72]	; 0x48
 8002504:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002506:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800250a:	f7fe fa69 	bl	80009e0 <__aeabi_uldivmod>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4613      	mov	r3, r2
 8002514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002518:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <HAL_RCC_GetSysClockFreq+0x458>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	0f1b      	lsrs	r3, r3, #28
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002526:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800252a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002536:	e003      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_RCC_GetSysClockFreq+0x45c>)
 800253a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800253e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002540:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002544:	4618      	mov	r0, r3
 8002546:	37b8      	adds	r7, #184	; 0xb8
 8002548:	46bd      	mov	sp, r7
 800254a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	00f42400 	.word	0x00f42400

08002558 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e28d      	b.n	8002a86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8083 	beq.w	800267e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002578:	4b94      	ldr	r3, [pc, #592]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b04      	cmp	r3, #4
 8002582:	d019      	beq.n	80025b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002584:	4b91      	ldr	r3, [pc, #580]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800258c:	2b08      	cmp	r3, #8
 800258e:	d106      	bne.n	800259e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002590:	4b8e      	ldr	r3, [pc, #568]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800259c:	d00c      	beq.n	80025b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259e:	4b8b      	ldr	r3, [pc, #556]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	d112      	bne.n	80025d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025aa:	4b88      	ldr	r3, [pc, #544]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025b6:	d10b      	bne.n	80025d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b8:	4b84      	ldr	r3, [pc, #528]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d05b      	beq.n	800267c <HAL_RCC_OscConfig+0x124>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d157      	bne.n	800267c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e25a      	b.n	8002a86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d8:	d106      	bne.n	80025e8 <HAL_RCC_OscConfig+0x90>
 80025da:	4b7c      	ldr	r3, [pc, #496]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a7b      	ldr	r2, [pc, #492]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e01d      	b.n	8002624 <HAL_RCC_OscConfig+0xcc>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0xb4>
 80025f2:	4b76      	ldr	r3, [pc, #472]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a75      	ldr	r2, [pc, #468]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80025f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	4b73      	ldr	r3, [pc, #460]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a72      	ldr	r2, [pc, #456]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 8002604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	e00b      	b.n	8002624 <HAL_RCC_OscConfig+0xcc>
 800260c:	4b6f      	ldr	r3, [pc, #444]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a6e      	ldr	r2, [pc, #440]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 8002612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	4b6c      	ldr	r3, [pc, #432]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a6b      	ldr	r2, [pc, #428]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 800261e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d013      	beq.n	8002654 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7ff f8a2 	bl	8001774 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002634:	f7ff f89e 	bl	8001774 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	; 0x64
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e21f      	b.n	8002a86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	4b61      	ldr	r3, [pc, #388]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0xdc>
 8002652:	e014      	b.n	800267e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7ff f88e 	bl	8001774 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265c:	f7ff f88a 	bl	8001774 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b64      	cmp	r3, #100	; 0x64
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e20b      	b.n	8002a86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266e:	4b57      	ldr	r3, [pc, #348]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x104>
 800267a:	e000      	b.n	800267e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d06f      	beq.n	800276a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800268a:	4b50      	ldr	r3, [pc, #320]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b00      	cmp	r3, #0
 8002694:	d017      	beq.n	80026c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002696:	4b4d      	ldr	r3, [pc, #308]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d105      	bne.n	80026ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026a2:	4b4a      	ldr	r3, [pc, #296]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ae:	4b47      	ldr	r3, [pc, #284]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026b6:	2b0c      	cmp	r3, #12
 80026b8:	d11c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ba:	4b44      	ldr	r3, [pc, #272]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d116      	bne.n	80026f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c6:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <HAL_RCC_OscConfig+0x186>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d001      	beq.n	80026de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e1d3      	b.n	8002a86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026de:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4937      	ldr	r1, [pc, #220]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f2:	e03a      	b.n	800276a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d020      	beq.n	800273e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026fc:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <HAL_RCC_OscConfig+0x278>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7ff f837 	bl	8001774 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270a:	f7ff f833 	bl	8001774 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e1b4      	b.n	8002a86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002728:	4b28      	ldr	r3, [pc, #160]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4925      	ldr	r1, [pc, #148]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 8002738:	4313      	orrs	r3, r2
 800273a:	600b      	str	r3, [r1, #0]
 800273c:	e015      	b.n	800276a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800273e:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <HAL_RCC_OscConfig+0x278>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7ff f816 	bl	8001774 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274c:	f7ff f812 	bl	8001774 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e193      	b.n	8002a86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275e:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d036      	beq.n	80027e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_RCC_OscConfig+0x27c>)
 8002780:	2201      	movs	r2, #1
 8002782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7fe fff6 	bl	8001774 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800278c:	f7fe fff2 	bl	8001774 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e173      	b.n	8002a86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80027a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x234>
 80027aa:	e01b      	b.n	80027e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <HAL_RCC_OscConfig+0x27c>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b2:	f7fe ffdf 	bl	8001774 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b8:	e00e      	b.n	80027d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ba:	f7fe ffdb 	bl	8001774 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d907      	bls.n	80027d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e15c      	b.n	8002a86 <HAL_RCC_OscConfig+0x52e>
 80027cc:	40023800 	.word	0x40023800
 80027d0:	42470000 	.word	0x42470000
 80027d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d8:	4b8a      	ldr	r3, [pc, #552]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 80027da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1ea      	bne.n	80027ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 8097 	beq.w	8002920 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f6:	4b83      	ldr	r3, [pc, #524]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10f      	bne.n	8002822 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b7f      	ldr	r3, [pc, #508]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a7e      	ldr	r2, [pc, #504]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 800280c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b7c      	ldr	r3, [pc, #496]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281e:	2301      	movs	r3, #1
 8002820:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002822:	4b79      	ldr	r3, [pc, #484]	; (8002a08 <HAL_RCC_OscConfig+0x4b0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d118      	bne.n	8002860 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800282e:	4b76      	ldr	r3, [pc, #472]	; (8002a08 <HAL_RCC_OscConfig+0x4b0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a75      	ldr	r2, [pc, #468]	; (8002a08 <HAL_RCC_OscConfig+0x4b0>)
 8002834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283a:	f7fe ff9b 	bl	8001774 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002842:	f7fe ff97 	bl	8001774 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e118      	b.n	8002a86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002854:	4b6c      	ldr	r3, [pc, #432]	; (8002a08 <HAL_RCC_OscConfig+0x4b0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x31e>
 8002868:	4b66      	ldr	r3, [pc, #408]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	4a65      	ldr	r2, [pc, #404]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6713      	str	r3, [r2, #112]	; 0x70
 8002874:	e01c      	b.n	80028b0 <HAL_RCC_OscConfig+0x358>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b05      	cmp	r3, #5
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x340>
 800287e:	4b61      	ldr	r3, [pc, #388]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	4a60      	ldr	r2, [pc, #384]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 8002884:	f043 0304 	orr.w	r3, r3, #4
 8002888:	6713      	str	r3, [r2, #112]	; 0x70
 800288a:	4b5e      	ldr	r3, [pc, #376]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	4a5d      	ldr	r2, [pc, #372]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6713      	str	r3, [r2, #112]	; 0x70
 8002896:	e00b      	b.n	80028b0 <HAL_RCC_OscConfig+0x358>
 8002898:	4b5a      	ldr	r3, [pc, #360]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	4a59      	ldr	r2, [pc, #356]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	6713      	str	r3, [r2, #112]	; 0x70
 80028a4:	4b57      	ldr	r3, [pc, #348]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	4a56      	ldr	r2, [pc, #344]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 80028aa:	f023 0304 	bic.w	r3, r3, #4
 80028ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d015      	beq.n	80028e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b8:	f7fe ff5c 	bl	8001774 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c0:	f7fe ff58 	bl	8001774 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e0d7      	b.n	8002a86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d6:	4b4b      	ldr	r3, [pc, #300]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0ee      	beq.n	80028c0 <HAL_RCC_OscConfig+0x368>
 80028e2:	e014      	b.n	800290e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e4:	f7fe ff46 	bl	8001774 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ec:	f7fe ff42 	bl	8001774 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e0c1      	b.n	8002a86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002902:	4b40      	ldr	r3, [pc, #256]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1ee      	bne.n	80028ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800290e:	7dfb      	ldrb	r3, [r7, #23]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d105      	bne.n	8002920 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002914:	4b3b      	ldr	r3, [pc, #236]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	4a3a      	ldr	r2, [pc, #232]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 800291a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80ad 	beq.w	8002a84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800292a:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b08      	cmp	r3, #8
 8002934:	d060      	beq.n	80029f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d145      	bne.n	80029ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293e:	4b33      	ldr	r3, [pc, #204]	; (8002a0c <HAL_RCC_OscConfig+0x4b4>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fe ff16 	bl	8001774 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe ff12 	bl	8001774 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e093      	b.n	8002a86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	4b29      	ldr	r3, [pc, #164]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	019b      	lsls	r3, r3, #6
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	085b      	lsrs	r3, r3, #1
 8002982:	3b01      	subs	r3, #1
 8002984:	041b      	lsls	r3, r3, #16
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	061b      	lsls	r3, r3, #24
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	071b      	lsls	r3, r3, #28
 8002996:	491b      	ldr	r1, [pc, #108]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <HAL_RCC_OscConfig+0x4b4>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a2:	f7fe fee7 	bl	8001774 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029aa:	f7fe fee3 	bl	8001774 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e064      	b.n	8002a86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x452>
 80029c8:	e05c      	b.n	8002a84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <HAL_RCC_OscConfig+0x4b4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7fe fed0 	bl	8001774 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d8:	f7fe fecc 	bl	8001774 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e04d      	b.n	8002a86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_RCC_OscConfig+0x4ac>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x480>
 80029f6:	e045      	b.n	8002a84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d107      	bne.n	8002a10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e040      	b.n	8002a86 <HAL_RCC_OscConfig+0x52e>
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40007000 	.word	0x40007000
 8002a0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a10:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <HAL_RCC_OscConfig+0x538>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d030      	beq.n	8002a80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d129      	bne.n	8002a80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d122      	bne.n	8002a80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a40:	4013      	ands	r3, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d119      	bne.n	8002a80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	085b      	lsrs	r3, r3, #1
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d10f      	bne.n	8002a80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d107      	bne.n	8002a80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800

08002a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e041      	b.n	8002b2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe fd28 	bl	8001510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	f000 f9ce 	bl	8002e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d001      	beq.n	8002b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e04e      	b.n	8002bea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a23      	ldr	r2, [pc, #140]	; (8002bf8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d022      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0x80>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b76:	d01d      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0x80>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1f      	ldr	r2, [pc, #124]	; (8002bfc <HAL_TIM_Base_Start_IT+0xc8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d018      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0x80>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d013      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0x80>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1c      	ldr	r2, [pc, #112]	; (8002c04 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00e      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0x80>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1b      	ldr	r2, [pc, #108]	; (8002c08 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d009      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0x80>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a19      	ldr	r2, [pc, #100]	; (8002c0c <HAL_TIM_Base_Start_IT+0xd8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d004      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0x80>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a18      	ldr	r2, [pc, #96]	; (8002c10 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d111      	bne.n	8002bd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b06      	cmp	r3, #6
 8002bc4:	d010      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd6:	e007      	b.n	8002be8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40010000 	.word	0x40010000
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	40000800 	.word	0x40000800
 8002c04:	40000c00 	.word	0x40000c00
 8002c08:	40010400 	.word	0x40010400
 8002c0c:	40014000 	.word	0x40014000
 8002c10:	40001800 	.word	0x40001800

08002c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d122      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d11b      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0202 	mvn.w	r2, #2
 8002c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f8ee 	bl	8002e38 <HAL_TIM_IC_CaptureCallback>
 8002c5c:	e005      	b.n	8002c6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f8e0 	bl	8002e24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f8f1 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d122      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0204 	mvn.w	r2, #4
 8002c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f8c4 	bl	8002e38 <HAL_TIM_IC_CaptureCallback>
 8002cb0:	e005      	b.n	8002cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f8b6 	bl	8002e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f8c7 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d122      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d11b      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0208 	mvn.w	r2, #8
 8002ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2204      	movs	r2, #4
 8002cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f89a 	bl	8002e38 <HAL_TIM_IC_CaptureCallback>
 8002d04:	e005      	b.n	8002d12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f88c 	bl	8002e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f89d 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b10      	cmp	r3, #16
 8002d24:	d122      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	d11b      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0210 	mvn.w	r2, #16
 8002d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2208      	movs	r2, #8
 8002d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f870 	bl	8002e38 <HAL_TIM_IC_CaptureCallback>
 8002d58:	e005      	b.n	8002d66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f862 	bl	8002e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f873 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d10e      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d107      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0201 	mvn.w	r2, #1
 8002d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fe f9ac 	bl	80010f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da2:	2b80      	cmp	r3, #128	; 0x80
 8002da4:	d10e      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db0:	2b80      	cmp	r3, #128	; 0x80
 8002db2:	d107      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f902 	bl	8002fc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	d10e      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ddc:	2b40      	cmp	r3, #64	; 0x40
 8002dde:	d107      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f838 	bl	8002e60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b20      	cmp	r3, #32
 8002dfc:	d10e      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d107      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0220 	mvn.w	r2, #32
 8002e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f8cc 	bl	8002fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a40      	ldr	r2, [pc, #256]	; (8002f88 <TIM_Base_SetConfig+0x114>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d013      	beq.n	8002eb4 <TIM_Base_SetConfig+0x40>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e92:	d00f      	beq.n	8002eb4 <TIM_Base_SetConfig+0x40>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a3d      	ldr	r2, [pc, #244]	; (8002f8c <TIM_Base_SetConfig+0x118>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d00b      	beq.n	8002eb4 <TIM_Base_SetConfig+0x40>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a3c      	ldr	r2, [pc, #240]	; (8002f90 <TIM_Base_SetConfig+0x11c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d007      	beq.n	8002eb4 <TIM_Base_SetConfig+0x40>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a3b      	ldr	r2, [pc, #236]	; (8002f94 <TIM_Base_SetConfig+0x120>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d003      	beq.n	8002eb4 <TIM_Base_SetConfig+0x40>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a3a      	ldr	r2, [pc, #232]	; (8002f98 <TIM_Base_SetConfig+0x124>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d108      	bne.n	8002ec6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a2f      	ldr	r2, [pc, #188]	; (8002f88 <TIM_Base_SetConfig+0x114>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d02b      	beq.n	8002f26 <TIM_Base_SetConfig+0xb2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed4:	d027      	beq.n	8002f26 <TIM_Base_SetConfig+0xb2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a2c      	ldr	r2, [pc, #176]	; (8002f8c <TIM_Base_SetConfig+0x118>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d023      	beq.n	8002f26 <TIM_Base_SetConfig+0xb2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a2b      	ldr	r2, [pc, #172]	; (8002f90 <TIM_Base_SetConfig+0x11c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d01f      	beq.n	8002f26 <TIM_Base_SetConfig+0xb2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a2a      	ldr	r2, [pc, #168]	; (8002f94 <TIM_Base_SetConfig+0x120>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d01b      	beq.n	8002f26 <TIM_Base_SetConfig+0xb2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a29      	ldr	r2, [pc, #164]	; (8002f98 <TIM_Base_SetConfig+0x124>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d017      	beq.n	8002f26 <TIM_Base_SetConfig+0xb2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a28      	ldr	r2, [pc, #160]	; (8002f9c <TIM_Base_SetConfig+0x128>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d013      	beq.n	8002f26 <TIM_Base_SetConfig+0xb2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a27      	ldr	r2, [pc, #156]	; (8002fa0 <TIM_Base_SetConfig+0x12c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00f      	beq.n	8002f26 <TIM_Base_SetConfig+0xb2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <TIM_Base_SetConfig+0x130>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00b      	beq.n	8002f26 <TIM_Base_SetConfig+0xb2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a25      	ldr	r2, [pc, #148]	; (8002fa8 <TIM_Base_SetConfig+0x134>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <TIM_Base_SetConfig+0xb2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a24      	ldr	r2, [pc, #144]	; (8002fac <TIM_Base_SetConfig+0x138>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <TIM_Base_SetConfig+0xb2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a23      	ldr	r2, [pc, #140]	; (8002fb0 <TIM_Base_SetConfig+0x13c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d108      	bne.n	8002f38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <TIM_Base_SetConfig+0x114>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d003      	beq.n	8002f6c <TIM_Base_SetConfig+0xf8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a0c      	ldr	r2, [pc, #48]	; (8002f98 <TIM_Base_SetConfig+0x124>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d103      	bne.n	8002f74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	615a      	str	r2, [r3, #20]
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40010000 	.word	0x40010000
 8002f8c:	40000400 	.word	0x40000400
 8002f90:	40000800 	.word	0x40000800
 8002f94:	40000c00 	.word	0x40000c00
 8002f98:	40010400 	.word	0x40010400
 8002f9c:	40014000 	.word	0x40014000
 8002fa0:	40014400 	.word	0x40014400
 8002fa4:	40014800 	.word	0x40014800
 8002fa8:	40001800 	.word	0x40001800
 8002fac:	40001c00 	.word	0x40001c00
 8002fb0:	40002000 	.word	0x40002000

08002fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e03f      	b.n	800306e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fe fad6 	bl	80015b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2224      	movs	r2, #36	; 0x24
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800301e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fd23 	bl	8003a6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003034:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003044:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003054:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003076:	b480      	push	{r7}
 8003078:	b085      	sub	sp, #20
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	4613      	mov	r3, r2
 8003082:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b20      	cmp	r3, #32
 800308e:	d130      	bne.n	80030f2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <HAL_UART_Transmit_IT+0x26>
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e029      	b.n	80030f4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_UART_Transmit_IT+0x38>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e022      	b.n	80030f4 <HAL_UART_Transmit_IT+0x7e>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	88fa      	ldrh	r2, [r7, #6]
 80030c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	88fa      	ldrh	r2, [r7, #6]
 80030c6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2221      	movs	r2, #33	; 0x21
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030ec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e000      	b.n	80030f4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80030f2:	2302      	movs	r3, #2
  }
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	4613      	mov	r3, r2
 800310c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b20      	cmp	r3, #32
 8003118:	d11d      	bne.n	8003156 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <HAL_UART_Receive_IT+0x26>
 8003120:	88fb      	ldrh	r3, [r7, #6]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e016      	b.n	8003158 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_UART_Receive_IT+0x38>
 8003134:	2302      	movs	r3, #2
 8003136:	e00f      	b.n	8003158 <HAL_UART_Receive_IT+0x58>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	461a      	mov	r2, r3
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fab5 	bl	80036bc <UART_Start_Receive_IT>
 8003152:	4603      	mov	r3, r0
 8003154:	e000      	b.n	8003158 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003156:	2302      	movs	r3, #2
  }
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b0ba      	sub	sp, #232	; 0xe8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003186:	2300      	movs	r3, #0
 8003188:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800318c:	2300      	movs	r3, #0
 800318e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800319e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10f      	bne.n	80031c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_UART_IRQHandler+0x66>
 80031b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fb99 	bl	80038f6 <UART_Receive_IT>
      return;
 80031c4:	e256      	b.n	8003674 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 80de 	beq.w	800338c <HAL_UART_IRQHandler+0x22c>
 80031d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80d1 	beq.w	800338c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_UART_IRQHandler+0xae>
 80031f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800320e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <HAL_UART_IRQHandler+0xd2>
 800321a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f043 0202 	orr.w	r2, r3, #2
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_UART_IRQHandler+0xf6>
 800323e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f043 0204 	orr.w	r2, r3, #4
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d011      	beq.n	8003286 <HAL_UART_IRQHandler+0x126>
 8003262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d105      	bne.n	800327a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800326e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f043 0208 	orr.w	r2, r3, #8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 81ed 	beq.w	800366a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_UART_IRQHandler+0x14e>
 800329c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fb24 	bl	80038f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b8:	2b40      	cmp	r3, #64	; 0x40
 80032ba:	bf0c      	ite	eq
 80032bc:	2301      	moveq	r3, #1
 80032be:	2300      	movne	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d103      	bne.n	80032da <HAL_UART_IRQHandler+0x17a>
 80032d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d04f      	beq.n	800337a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fa2c 	bl	8003738 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b40      	cmp	r3, #64	; 0x40
 80032ec:	d141      	bne.n	8003372 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3314      	adds	r3, #20
 80032f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800330c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3314      	adds	r3, #20
 8003316:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800331a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800331e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003326:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800332a:	e841 2300 	strex	r3, r2, [r1]
 800332e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1d9      	bne.n	80032ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	2b00      	cmp	r3, #0
 8003340:	d013      	beq.n	800336a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	4a7d      	ldr	r2, [pc, #500]	; (800353c <HAL_UART_IRQHandler+0x3dc>)
 8003348:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe fb9d 	bl	8001a8e <HAL_DMA_Abort_IT>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d016      	beq.n	8003388 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003364:	4610      	mov	r0, r2
 8003366:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003368:	e00e      	b.n	8003388 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f990 	bl	8003690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003370:	e00a      	b.n	8003388 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f98c 	bl	8003690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003378:	e006      	b.n	8003388 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f988 	bl	8003690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003386:	e170      	b.n	800366a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003388:	bf00      	nop
    return;
 800338a:	e16e      	b.n	800366a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	2b01      	cmp	r3, #1
 8003392:	f040 814a 	bne.w	800362a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8143 	beq.w	800362a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 813c 	beq.w	800362a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d2:	2b40      	cmp	r3, #64	; 0x40
 80033d4:	f040 80b4 	bne.w	8003540 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8140 	beq.w	800366e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033f6:	429a      	cmp	r2, r3
 80033f8:	f080 8139 	bcs.w	800366e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003402:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800340e:	f000 8088 	beq.w	8003522 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	330c      	adds	r3, #12
 8003418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003428:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800342c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003430:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	330c      	adds	r3, #12
 800343a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800343e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800344a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1d9      	bne.n	8003412 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3314      	adds	r3, #20
 8003464:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003468:	e853 3f00 	ldrex	r3, [r3]
 800346c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800346e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003470:	f023 0301 	bic.w	r3, r3, #1
 8003474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3314      	adds	r3, #20
 800347e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003482:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003486:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003488:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800348a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e1      	bne.n	800345e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3314      	adds	r3, #20
 80034a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3314      	adds	r3, #20
 80034ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034c6:	e841 2300 	strex	r3, r2, [r1]
 80034ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e3      	bne.n	800349a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	330c      	adds	r3, #12
 80034e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ea:	e853 3f00 	ldrex	r3, [r3]
 80034ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f2:	f023 0310 	bic.w	r3, r3, #16
 80034f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	330c      	adds	r3, #12
 8003500:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003504:	65ba      	str	r2, [r7, #88]	; 0x58
 8003506:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003508:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800350a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800350c:	e841 2300 	strex	r3, r2, [r1]
 8003510:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1e3      	bne.n	80034e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	4618      	mov	r0, r3
 800351e:	f7fe fa46 	bl	80019ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800352a:	b29b      	uxth	r3, r3
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	b29b      	uxth	r3, r3
 8003530:	4619      	mov	r1, r3
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f8b6 	bl	80036a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003538:	e099      	b.n	800366e <HAL_UART_IRQHandler+0x50e>
 800353a:	bf00      	nop
 800353c:	080037ff 	.word	0x080037ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003548:	b29b      	uxth	r3, r3
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 808b 	beq.w	8003672 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800355c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8086 	beq.w	8003672 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	330c      	adds	r3, #12
 800356c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	e853 3f00 	ldrex	r3, [r3]
 8003574:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003578:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800357c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	330c      	adds	r3, #12
 8003586:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800358a:	647a      	str	r2, [r7, #68]	; 0x44
 800358c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003590:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003592:	e841 2300 	strex	r3, r2, [r1]
 8003596:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1e3      	bne.n	8003566 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3314      	adds	r3, #20
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	623b      	str	r3, [r7, #32]
   return(result);
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3314      	adds	r3, #20
 80035be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035c2:	633a      	str	r2, [r7, #48]	; 0x30
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e3      	bne.n	800359e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	330c      	adds	r3, #12
 80035ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	e853 3f00 	ldrex	r3, [r3]
 80035f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0310 	bic.w	r3, r3, #16
 80035fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	330c      	adds	r3, #12
 8003604:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003608:	61fa      	str	r2, [r7, #28]
 800360a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	69b9      	ldr	r1, [r7, #24]
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	617b      	str	r3, [r7, #20]
   return(result);
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e3      	bne.n	80035e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800361c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003620:	4619      	mov	r1, r3
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f83e 	bl	80036a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003628:	e023      	b.n	8003672 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800362a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_UART_IRQHandler+0x4ea>
 8003636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800363a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f8ef 	bl	8003826 <UART_Transmit_IT>
    return;
 8003648:	e014      	b.n	8003674 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800364a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00e      	beq.n	8003674 <HAL_UART_IRQHandler+0x514>
 8003656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f92f 	bl	80038c6 <UART_EndTransmit_IT>
    return;
 8003668:	e004      	b.n	8003674 <HAL_UART_IRQHandler+0x514>
    return;
 800366a:	bf00      	nop
 800366c:	e002      	b.n	8003674 <HAL_UART_IRQHandler+0x514>
      return;
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <HAL_UART_IRQHandler+0x514>
      return;
 8003672:	bf00      	nop
  }
}
 8003674:	37e8      	adds	r7, #232	; 0xe8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop

0800367c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	4613      	mov	r3, r2
 80036c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	88fa      	ldrh	r2, [r7, #6]
 80036d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	88fa      	ldrh	r2, [r7, #6]
 80036da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2222      	movs	r2, #34	; 0x22
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d007      	beq.n	800370a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003708:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695a      	ldr	r2, [r3, #20]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0201 	orr.w	r2, r2, #1
 8003718:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0220 	orr.w	r2, r2, #32
 8003728:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003738:	b480      	push	{r7}
 800373a:	b095      	sub	sp, #84	; 0x54
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	330c      	adds	r3, #12
 8003746:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374a:	e853 3f00 	ldrex	r3, [r3]
 800374e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003760:	643a      	str	r2, [r7, #64]	; 0x40
 8003762:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003766:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e5      	bne.n	8003740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3314      	adds	r3, #20
 800377a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	61fb      	str	r3, [r7, #28]
   return(result);
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	64bb      	str	r3, [r7, #72]	; 0x48
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3314      	adds	r3, #20
 8003792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003794:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800379a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e5      	bne.n	8003774 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d119      	bne.n	80037e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	e853 3f00 	ldrex	r3, [r3]
 80037be:	60bb      	str	r3, [r7, #8]
   return(result);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f023 0310 	bic.w	r3, r3, #16
 80037c6:	647b      	str	r3, [r7, #68]	; 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037d0:	61ba      	str	r2, [r7, #24]
 80037d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d4:	6979      	ldr	r1, [r7, #20]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	e841 2300 	strex	r3, r2, [r1]
 80037dc:	613b      	str	r3, [r7, #16]
   return(result);
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e5      	bne.n	80037b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037f2:	bf00      	nop
 80037f4:	3754      	adds	r7, #84	; 0x54
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f7ff ff39 	bl	8003690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b21      	cmp	r3, #33	; 0x21
 8003838:	d13e      	bne.n	80038b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003842:	d114      	bne.n	800386e <UART_Transmit_IT+0x48>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d110      	bne.n	800386e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003860:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	1c9a      	adds	r2, r3, #2
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	621a      	str	r2, [r3, #32]
 800386c:	e008      	b.n	8003880 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	1c59      	adds	r1, r3, #1
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6211      	str	r1, [r2, #32]
 8003878:	781a      	ldrb	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29b      	uxth	r3, r3
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	4619      	mov	r1, r3
 800388e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10f      	bne.n	80038b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff fec8 	bl	800367c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b08c      	sub	sp, #48	; 0x30
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b22      	cmp	r3, #34	; 0x22
 8003908:	f040 80ab 	bne.w	8003a62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003914:	d117      	bne.n	8003946 <UART_Receive_IT+0x50>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d113      	bne.n	8003946 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800391e:	2300      	movs	r3, #0
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003926:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	b29b      	uxth	r3, r3
 8003930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003934:	b29a      	uxth	r2, r3
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	1c9a      	adds	r2, r3, #2
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	; 0x28
 8003944:	e026      	b.n	8003994 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800394c:	2300      	movs	r3, #0
 800394e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003958:	d007      	beq.n	800396a <UART_Receive_IT+0x74>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10a      	bne.n	8003978 <UART_Receive_IT+0x82>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	b2da      	uxtb	r2, r3
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	e008      	b.n	800398a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003984:	b2da      	uxtb	r2, r3
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29b      	uxth	r3, r3
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4619      	mov	r1, r3
 80039a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d15a      	bne.n	8003a5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0220 	bic.w	r2, r2, #32
 80039b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0201 	bic.w	r2, r2, #1
 80039d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d135      	bne.n	8003a54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	330c      	adds	r3, #12
 80039f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	613b      	str	r3, [r7, #16]
   return(result);
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f023 0310 	bic.w	r3, r3, #16
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	330c      	adds	r3, #12
 8003a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0e:	623a      	str	r2, [r7, #32]
 8003a10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	69f9      	ldr	r1, [r7, #28]
 8003a14:	6a3a      	ldr	r2, [r7, #32]
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e5      	bne.n	80039ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d10a      	bne.n	8003a46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff fe29 	bl	80036a4 <HAL_UARTEx_RxEventCallback>
 8003a52:	e002      	b.n	8003a5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7fd fbc1 	bl	80011dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e002      	b.n	8003a64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e000      	b.n	8003a64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a62:	2302      	movs	r3, #2
  }
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3730      	adds	r7, #48	; 0x30
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a70:	b0c0      	sub	sp, #256	; 0x100
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a88:	68d9      	ldr	r1, [r3, #12]
 8003a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	ea40 0301 	orr.w	r3, r0, r1
 8003a94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ac4:	f021 010c 	bic.w	r1, r1, #12
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae6:	6999      	ldr	r1, [r3, #24]
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	ea40 0301 	orr.w	r3, r0, r1
 8003af2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4b8f      	ldr	r3, [pc, #572]	; (8003d38 <UART_SetConfig+0x2cc>)
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d005      	beq.n	8003b0c <UART_SetConfig+0xa0>
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4b8d      	ldr	r3, [pc, #564]	; (8003d3c <UART_SetConfig+0x2d0>)
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d104      	bne.n	8003b16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b0c:	f7fe fae0 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 8003b10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b14:	e003      	b.n	8003b1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b16:	f7fe fac7 	bl	80020a8 <HAL_RCC_GetPCLK1Freq>
 8003b1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b28:	f040 810c 	bne.w	8003d44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b30:	2200      	movs	r2, #0
 8003b32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b3e:	4622      	mov	r2, r4
 8003b40:	462b      	mov	r3, r5
 8003b42:	1891      	adds	r1, r2, r2
 8003b44:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b46:	415b      	adcs	r3, r3
 8003b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b4e:	4621      	mov	r1, r4
 8003b50:	eb12 0801 	adds.w	r8, r2, r1
 8003b54:	4629      	mov	r1, r5
 8003b56:	eb43 0901 	adc.w	r9, r3, r1
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b6e:	4690      	mov	r8, r2
 8003b70:	4699      	mov	r9, r3
 8003b72:	4623      	mov	r3, r4
 8003b74:	eb18 0303 	adds.w	r3, r8, r3
 8003b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b7c:	462b      	mov	r3, r5
 8003b7e:	eb49 0303 	adc.w	r3, r9, r3
 8003b82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	18db      	adds	r3, r3, r3
 8003b9e:	653b      	str	r3, [r7, #80]	; 0x50
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	eb42 0303 	adc.w	r3, r2, r3
 8003ba6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ba8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003bb0:	f7fc ff16 	bl	80009e0 <__aeabi_uldivmod>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4b61      	ldr	r3, [pc, #388]	; (8003d40 <UART_SetConfig+0x2d4>)
 8003bba:	fba3 2302 	umull	r2, r3, r3, r2
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	011c      	lsls	r4, r3, #4
 8003bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bcc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003bd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003bd4:	4642      	mov	r2, r8
 8003bd6:	464b      	mov	r3, r9
 8003bd8:	1891      	adds	r1, r2, r2
 8003bda:	64b9      	str	r1, [r7, #72]	; 0x48
 8003bdc:	415b      	adcs	r3, r3
 8003bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003be0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003be4:	4641      	mov	r1, r8
 8003be6:	eb12 0a01 	adds.w	sl, r2, r1
 8003bea:	4649      	mov	r1, r9
 8003bec:	eb43 0b01 	adc.w	fp, r3, r1
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c04:	4692      	mov	sl, r2
 8003c06:	469b      	mov	fp, r3
 8003c08:	4643      	mov	r3, r8
 8003c0a:	eb1a 0303 	adds.w	r3, sl, r3
 8003c0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c12:	464b      	mov	r3, r9
 8003c14:	eb4b 0303 	adc.w	r3, fp, r3
 8003c18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c30:	460b      	mov	r3, r1
 8003c32:	18db      	adds	r3, r3, r3
 8003c34:	643b      	str	r3, [r7, #64]	; 0x40
 8003c36:	4613      	mov	r3, r2
 8003c38:	eb42 0303 	adc.w	r3, r2, r3
 8003c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c46:	f7fc fecb 	bl	80009e0 <__aeabi_uldivmod>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4b3b      	ldr	r3, [pc, #236]	; (8003d40 <UART_SetConfig+0x2d4>)
 8003c52:	fba3 2301 	umull	r2, r3, r3, r1
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	2264      	movs	r2, #100	; 0x64
 8003c5a:	fb02 f303 	mul.w	r3, r2, r3
 8003c5e:	1acb      	subs	r3, r1, r3
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c66:	4b36      	ldr	r3, [pc, #216]	; (8003d40 <UART_SetConfig+0x2d4>)
 8003c68:	fba3 2302 	umull	r2, r3, r3, r2
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c74:	441c      	add	r4, r3
 8003c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c88:	4642      	mov	r2, r8
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	1891      	adds	r1, r2, r2
 8003c8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c90:	415b      	adcs	r3, r3
 8003c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c98:	4641      	mov	r1, r8
 8003c9a:	1851      	adds	r1, r2, r1
 8003c9c:	6339      	str	r1, [r7, #48]	; 0x30
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	414b      	adcs	r3, r1
 8003ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003cb0:	4659      	mov	r1, fp
 8003cb2:	00cb      	lsls	r3, r1, #3
 8003cb4:	4651      	mov	r1, sl
 8003cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cba:	4651      	mov	r1, sl
 8003cbc:	00ca      	lsls	r2, r1, #3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	189b      	adds	r3, r3, r2
 8003cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ccc:	464b      	mov	r3, r9
 8003cce:	460a      	mov	r2, r1
 8003cd0:	eb42 0303 	adc.w	r3, r2, r3
 8003cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ce4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ce8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003cec:	460b      	mov	r3, r1
 8003cee:	18db      	adds	r3, r3, r3
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	eb42 0303 	adc.w	r3, r2, r3
 8003cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d02:	f7fc fe6d 	bl	80009e0 <__aeabi_uldivmod>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <UART_SetConfig+0x2d4>)
 8003d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	2164      	movs	r1, #100	; 0x64
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	3332      	adds	r3, #50	; 0x32
 8003d1e:	4a08      	ldr	r2, [pc, #32]	; (8003d40 <UART_SetConfig+0x2d4>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	f003 0207 	and.w	r2, r3, #7
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4422      	add	r2, r4
 8003d32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d34:	e105      	b.n	8003f42 <UART_SetConfig+0x4d6>
 8003d36:	bf00      	nop
 8003d38:	40011000 	.word	0x40011000
 8003d3c:	40011400 	.word	0x40011400
 8003d40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d56:	4642      	mov	r2, r8
 8003d58:	464b      	mov	r3, r9
 8003d5a:	1891      	adds	r1, r2, r2
 8003d5c:	6239      	str	r1, [r7, #32]
 8003d5e:	415b      	adcs	r3, r3
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
 8003d62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d66:	4641      	mov	r1, r8
 8003d68:	1854      	adds	r4, r2, r1
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	eb43 0501 	adc.w	r5, r3, r1
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	00eb      	lsls	r3, r5, #3
 8003d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d7e:	00e2      	lsls	r2, r4, #3
 8003d80:	4614      	mov	r4, r2
 8003d82:	461d      	mov	r5, r3
 8003d84:	4643      	mov	r3, r8
 8003d86:	18e3      	adds	r3, r4, r3
 8003d88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d8c:	464b      	mov	r3, r9
 8003d8e:	eb45 0303 	adc.w	r3, r5, r3
 8003d92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003da2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003db2:	4629      	mov	r1, r5
 8003db4:	008b      	lsls	r3, r1, #2
 8003db6:	4621      	mov	r1, r4
 8003db8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	008a      	lsls	r2, r1, #2
 8003dc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003dc4:	f7fc fe0c 	bl	80009e0 <__aeabi_uldivmod>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4b60      	ldr	r3, [pc, #384]	; (8003f50 <UART_SetConfig+0x4e4>)
 8003dce:	fba3 2302 	umull	r2, r3, r3, r2
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	011c      	lsls	r4, r3, #4
 8003dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003de0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003de4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003de8:	4642      	mov	r2, r8
 8003dea:	464b      	mov	r3, r9
 8003dec:	1891      	adds	r1, r2, r2
 8003dee:	61b9      	str	r1, [r7, #24]
 8003df0:	415b      	adcs	r3, r3
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003df8:	4641      	mov	r1, r8
 8003dfa:	1851      	adds	r1, r2, r1
 8003dfc:	6139      	str	r1, [r7, #16]
 8003dfe:	4649      	mov	r1, r9
 8003e00:	414b      	adcs	r3, r1
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e10:	4659      	mov	r1, fp
 8003e12:	00cb      	lsls	r3, r1, #3
 8003e14:	4651      	mov	r1, sl
 8003e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e1a:	4651      	mov	r1, sl
 8003e1c:	00ca      	lsls	r2, r1, #3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4619      	mov	r1, r3
 8003e22:	4603      	mov	r3, r0
 8003e24:	4642      	mov	r2, r8
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e2c:	464b      	mov	r3, r9
 8003e2e:	460a      	mov	r2, r1
 8003e30:	eb42 0303 	adc.w	r3, r2, r3
 8003e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e50:	4649      	mov	r1, r9
 8003e52:	008b      	lsls	r3, r1, #2
 8003e54:	4641      	mov	r1, r8
 8003e56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e5a:	4641      	mov	r1, r8
 8003e5c:	008a      	lsls	r2, r1, #2
 8003e5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e62:	f7fc fdbd 	bl	80009e0 <__aeabi_uldivmod>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4b39      	ldr	r3, [pc, #228]	; (8003f50 <UART_SetConfig+0x4e4>)
 8003e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	2164      	movs	r1, #100	; 0x64
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	3332      	adds	r3, #50	; 0x32
 8003e7e:	4a34      	ldr	r2, [pc, #208]	; (8003f50 <UART_SetConfig+0x4e4>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e8a:	441c      	add	r4, r3
 8003e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e90:	2200      	movs	r2, #0
 8003e92:	673b      	str	r3, [r7, #112]	; 0x70
 8003e94:	677a      	str	r2, [r7, #116]	; 0x74
 8003e96:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e9a:	4642      	mov	r2, r8
 8003e9c:	464b      	mov	r3, r9
 8003e9e:	1891      	adds	r1, r2, r2
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	415b      	adcs	r3, r3
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eaa:	4641      	mov	r1, r8
 8003eac:	1851      	adds	r1, r2, r1
 8003eae:	6039      	str	r1, [r7, #0]
 8003eb0:	4649      	mov	r1, r9
 8003eb2:	414b      	adcs	r3, r1
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ec2:	4659      	mov	r1, fp
 8003ec4:	00cb      	lsls	r3, r1, #3
 8003ec6:	4651      	mov	r1, sl
 8003ec8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ecc:	4651      	mov	r1, sl
 8003ece:	00ca      	lsls	r2, r1, #3
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	4642      	mov	r2, r8
 8003ed8:	189b      	adds	r3, r3, r2
 8003eda:	66bb      	str	r3, [r7, #104]	; 0x68
 8003edc:	464b      	mov	r3, r9
 8003ede:	460a      	mov	r2, r1
 8003ee0:	eb42 0303 	adc.w	r3, r2, r3
 8003ee4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	663b      	str	r3, [r7, #96]	; 0x60
 8003ef0:	667a      	str	r2, [r7, #100]	; 0x64
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003efe:	4649      	mov	r1, r9
 8003f00:	008b      	lsls	r3, r1, #2
 8003f02:	4641      	mov	r1, r8
 8003f04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f08:	4641      	mov	r1, r8
 8003f0a:	008a      	lsls	r2, r1, #2
 8003f0c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f10:	f7fc fd66 	bl	80009e0 <__aeabi_uldivmod>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <UART_SetConfig+0x4e4>)
 8003f1a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	2164      	movs	r1, #100	; 0x64
 8003f22:	fb01 f303 	mul.w	r3, r1, r3
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	3332      	adds	r3, #50	; 0x32
 8003f2c:	4a08      	ldr	r2, [pc, #32]	; (8003f50 <UART_SetConfig+0x4e4>)
 8003f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	f003 020f 	and.w	r2, r3, #15
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4422      	add	r2, r4
 8003f40:	609a      	str	r2, [r3, #8]
}
 8003f42:	bf00      	nop
 8003f44:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f4e:	bf00      	nop
 8003f50:	51eb851f 	.word	0x51eb851f

08003f54 <__libc_init_array>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	4d0d      	ldr	r5, [pc, #52]	; (8003f8c <__libc_init_array+0x38>)
 8003f58:	4c0d      	ldr	r4, [pc, #52]	; (8003f90 <__libc_init_array+0x3c>)
 8003f5a:	1b64      	subs	r4, r4, r5
 8003f5c:	10a4      	asrs	r4, r4, #2
 8003f5e:	2600      	movs	r6, #0
 8003f60:	42a6      	cmp	r6, r4
 8003f62:	d109      	bne.n	8003f78 <__libc_init_array+0x24>
 8003f64:	4d0b      	ldr	r5, [pc, #44]	; (8003f94 <__libc_init_array+0x40>)
 8003f66:	4c0c      	ldr	r4, [pc, #48]	; (8003f98 <__libc_init_array+0x44>)
 8003f68:	f000 f820 	bl	8003fac <_init>
 8003f6c:	1b64      	subs	r4, r4, r5
 8003f6e:	10a4      	asrs	r4, r4, #2
 8003f70:	2600      	movs	r6, #0
 8003f72:	42a6      	cmp	r6, r4
 8003f74:	d105      	bne.n	8003f82 <__libc_init_array+0x2e>
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
 8003f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f7c:	4798      	blx	r3
 8003f7e:	3601      	adds	r6, #1
 8003f80:	e7ee      	b.n	8003f60 <__libc_init_array+0xc>
 8003f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f86:	4798      	blx	r3
 8003f88:	3601      	adds	r6, #1
 8003f8a:	e7f2      	b.n	8003f72 <__libc_init_array+0x1e>
 8003f8c:	080040e8 	.word	0x080040e8
 8003f90:	080040e8 	.word	0x080040e8
 8003f94:	080040e8 	.word	0x080040e8
 8003f98:	080040ec 	.word	0x080040ec

08003f9c <memset>:
 8003f9c:	4402      	add	r2, r0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d100      	bne.n	8003fa6 <memset+0xa>
 8003fa4:	4770      	bx	lr
 8003fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8003faa:	e7f9      	b.n	8003fa0 <memset+0x4>

08003fac <_init>:
 8003fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fae:	bf00      	nop
 8003fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fb2:	bc08      	pop	{r3}
 8003fb4:	469e      	mov	lr, r3
 8003fb6:	4770      	bx	lr

08003fb8 <_fini>:
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fba:	bf00      	nop
 8003fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fbe:	bc08      	pop	{r3}
 8003fc0:	469e      	mov	lr, r3
 8003fc2:	4770      	bx	lr
